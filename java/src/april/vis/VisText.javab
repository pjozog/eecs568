package april.vis;

import java.awt.*;
import java.awt.geom.*;
import java.awt.event.*;
import java.awt.image.*;
import java.io.*;
import java.util.*;
import java.nio.channels.*;
import java.nio.*;
import javax.swing.*;

import april.jmat.geom.*;
import april.jmat.*;

/** All formatting, with the exception of anchoring is specified using
 * markup. **/
public class VisText implements VisObject
{
    public enum ANCHOR { TOP_LEFT, TOP, TOP_RIGHT, LEFT, CENTER, RIGHT, BOTTOM_LEFT, BOTTOM, BOTTOM_RIGHT };
    ANCHOR anchor;

    // The text as passed in by user.
    String text;

    // Our internal data representation
    ArrayList<Line> lines = new ArrayList<Line>();

    /** Global state: these properties affect the rendering of the
     * whole VisText and can be specified by properties in text
     * markup. If specified multiple times, the last markup will
     * dictate the behavior. **/
    boolean dropShadow = true;
    double dropShadowAlpha = 0.8;
    double dropShadowMarginPixels = 3.0;
    Color dropShadowColor = null; // if not set, mirrors color of VisLayer background.

    int pixelMargin = 3.0; // around entire VisText

    enum JUSTIFICATION { LEFT, CENTER, RIGHT };

    /** A line of text is composed of multiple styled fragments, each
     * drawn contiguously (horizontally). The line additionally has an
     * alignment, which determines how the text is justified.
     **/
    static class Line
    {
        ArrayList<StyledFragment> fragments = new ArrayList<StyledFragment>();
        JUSTIFICATION justification;

        /** how much additional space below this line should we leave? **/
        int leading = 1;

        int getWidth(GLUT glut)
        {
            int width = 0;

            for (StyledFragment frag : fragments) {
                width += frag.getWidth(glut);
            }

            return width;
        }

        int getHeight(GLUT glut)
        {
            int maxheight = 1;

            for (StyledFragment frag : fragments) {
                maxheight = Math.max(maxheight, frag.getHeight(glut));
            }

            return maxheight + leading;
        }
    }

    /** Each fragment has a font, color, and the string itself. A line
     * can contain multiple styled fragments.
     **/
    static class StyledFragment
    {
        int font;
        Color c;
        String s;
        int    width = -1; // width of this fragment in pixels. (-1 means compute from the font.)

        int getWidth(GLUT glut)
        {
            if (width >=0)
                return width;

            return glut.glutBitmapLength(font, s);
        }

        /** Total line height in pixels. **/
        int getHeight(GLUT glut)
        {
            return glutBitmapHeight(font);
        }

        /** What is the descent of the font? **/
        int getDescent(GLUT glut)
        {
            // hack. We don't know this data, so we make it up.
            return glutBitmapHeight(font)/5;
        }
    }

    public VisText(String text)
    {
        this(ANCHOR.TOP_LEFT, text);
    }

    public VisText(ANCHOR anchor, String text)
    {
        this.anchor = anchor;

        addText(text);
    }

    public void addText(String s)
    {
        text = text + s;
        lines = null; // force reparse
    }

    static Color stringToColor(String s)
    {
        if (s.length()==7)
            return new Color(Integer.parseInt(s.substring(1,3), 16),
                             Integer.parseInt(s.substring(3,5), 16),
                             Integer.parseInt(s.substring(5,7), 16));
        if (s.length()==9)
            return new Color(Integer.parseInt(s.substring(1,3), 16),
                             Integer.parseInt(s.substring(3,5), 16),
                             Integer.parseInt(s.substring(5,7), 16),
                             Integer.parseInt(s.substring(7,9), 16));
        System.out.println("VisText: Badly formatted color "+s);
        return null;

    }

    // completely reparse the text.
    void parse()
    {
        JUSTIFICATION justification = LEFT;
        Color color= Color.black;
        int font = GLUT.BITMAP_HELVETICA_18;

        lines.clear();

        String ss[] = text.split("\\n");
        for (String s : ss) {

            int pos = 0;

            Line line = new Line();
            line.justification = justification;
            lines.add(line);

            while (pos >= 0 && pos < s.length()) {

                // If there's not a format specifier first, consume
                // everything up until the format specifier.
                int fmtpos = s.indexOf("<<", pos);
                int endfmtpos = fmtpos >=0 ? s.indexOf(">>", fmtpos) : -1;

                if (fmtpos != pos || fmtpos < 0 || endfmtpos < 0) {
                    StyledFragment frag = new StyledFragment();
                    frag.font = font;
                    frag.c = c;
                    frag.width = width;
                    width = -1; // width isn't stateful.
                    if (fmtpos < 0)
                        frag.s = s.substring(pos);
                    else
                        frag.s = s.substring(pos, fmtpos);

                    line.fragments.add(frag);
                    pos = fmtpos;
                    continue;
                }

                // a format specifier begins at pos.
                String fmt = s.substring(fmtpos+2, endfmtpos);
                String toks[] = fmt.split(",");
                for (int i = 0; i < toks.length; i++) {
                    toks[i] = toks[i].toLowerCase().trim();

                    // #RRGGBB
                    if (toks[i].startsWith("#") && (toks[i].length()==7 || toks[i].length()==9)) {
                        c = stringToColor(toks[i]);
                        continue;
                    }

                    if (toks[i].startsWith("dropshadow")) {
                        if (toks[i].contains("=")) {
                            String arg = toks[i].substring(toks[i].indexOf("=")+1).trim().toLowerCase();
                            if (arg.equals("true") || arg.equals("yes") || arg.equals("1"))
                                dropShadow = true;
                            else if (arg.equals("false") || arg.equals("no") || arg.equals("0"))
                                dropShadow = false;
                            else if (arg.startsWith("#")) {
                                dropShadow = true;
                                dropShadowColor = stringToColor(arg);
                            } else {
                                System.out.println("VisText: Don't understand "+toks[i]);
                            }
                        } else {
                            dropShadow = true;
                        }
                        continue;
                    }

                    if (toks[i].equals("blue")) {
                        color = Color.blue;
                        continue;
                    }
                    if (toks[i].equals("red")) {
                        color = Color.red;
                        continue;
                    }
                    if (toks[i].equals("green")) {
                        color = Color.green;
                        continue;
                    }
                    if (toks[i].equals("black")) {
                        color = Color.black;
                        continue;
                    }
                    if (toks[i].equals("orange")) {
                        color = Color.orange;
                        continue;
                    }
                    if (toks[i].equals("yellow")) {
                        color = Color.yellow;
                        continue;
                    }
                    if (toks[i].equals("cyan")) {
                        color = Color.cyan;
                        continue;
                    }
                    if (toks[i].equals("magenta")) {
                        color = Color.magenta;
                        continue;
                    }
                    if (toks[i].equals("gray")) {
                        color = Color.gray;
                        continue;
                    }
                    if (toks[i].equals("white")) {
                        color = Color.white;
                        continue;
                    }
                    if (toks[i].equals("pink")) {
                        color = Color.pink;
                        continue;
                    }
                    if (toks[i].equals("darkgray")) {
                        color = Color.darkGray;
                        continue;
                    }

                    // non-fixed width fonts
                    if (toks[i].equals("big") || toks[i].equals("large")) {
                        font = GLUT.BITMAP_HELVETICA_18;
                        continue;
                    }
                    if (toks[i].equals("normal")) {
                        font = GLUT.BITMAP_HELVETICA_12;
                        continue;
                    }
                    if (toks[i].equals("small")) {
                        font = GLUT.BITMAP_HELVETICA_10;
                        continue;
                    }
                    // mono-spaced fonts
                    if (toks[i].equals("mono-big") || toks[i].equals("mono-large")) {
                        font = GLUT.BITMAP_9_BY_15;
                        continue;
                    }
                    if (toks[i].equals("mono-normal")) {
                        font = GLUT.BITMAP_8_BY_13;
                        continue;
                    }
                    if (toks[i].equals("mono-small")) {
                        font = GLUT.BITMAP_8_BY_13;
                        continue;
                    }

                    if (toks[i].equals("left")) {
                        justification = JUSTIFICATION.LEFT;
                        line.justification = justification;
                        continue;
                    }
                    if (toks[i].equals("center")) {
                        justification = JUSTIFICATION.CENTER;
                        line.justification = justification;
                        continue;
                    }
                    if (toks[i].equals("right")) {
                        justification = JUSTIFICATION.RIGHT;
                        line.justification = justification;
                        continue;
                    }
                    // fixed-width. (manually specify width in
                    // pixels. Useful for making non-fixed width fonts
                    // line up.
                    if (toks[i].startsWith("width=")) {
                        width = Integer.parseInt(toks[i].substring(6));
                        continue;
                    }
                    System.out.println("VisText: Unknown format specifier: "+toks[i]);
                }

                // skip to the end of the format specifier.
                pos = endfmtpos + 2;
            }
        } // for (String s : ss)

    }

    public void render(VisCanvas vc, VisLayer layer, VisCanvas.RenderInfo rinfo, GL gl)
    {
        if (lines == null)
            parse();

    }
}
