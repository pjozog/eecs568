/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package se;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class request_state_t implements lcm.lcm.LCMEncodable
{
    public int n;
    public long variables[];
    public short state_type;
 
    public request_state_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x4200fb6b0323f463L;
 
    public static final short POSE = (short) 1;
    public static final short COV_FULL = (short) 2;
    public static final short COV_BLOCK = (short) 4;
    public static final short COV_RIGHTCOL = (short) 8;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(se.request_state_t.class))
            return 0L;
 
        classes.add(se.request_state_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.n); 
 
        for (int a = 0; a < this.n; a++) {
            outs.writeLong(this.variables[a]); 
        }
 
        outs.writeShort(this.state_type); 
 
    }
 
    public request_state_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public request_state_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static se.request_state_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        se.request_state_t o = new se.request_state_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.n = ins.readInt();
 
        this.variables = new long[(int) n];
        for (int a = 0; a < this.n; a++) {
            this.variables[a] = ins.readLong();
        }
 
        this.state_type = ins.readShort();
 
    }
 
    public se.request_state_t copy()
    {
        se.request_state_t outobj = new se.request_state_t();
        outobj.n = this.n;
 
        outobj.variables = new long[(int) n];
        if (this.n > 0)
            System.arraycopy(this.variables, 0, outobj.variables, 0, this.n); 
        outobj.state_type = this.state_type;
 
        return outobj;
    }
 
}

