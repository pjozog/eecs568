/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package senlcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class ppsboard_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public String ntp_time;
    public boolean ntp_status;
    public String src_type;
    public boolean src_pps;
    public short sync_mode;
    public short sync_num;
    public String sync_date;
    public String sync_time;
    public short offset_counts;
    public double offset_usecs;
    public double temperature;
 
    public ppsboard_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x538d2ca386703a6cL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(senlcm.ppsboard_t.class))
            return 0L;
 
        classes.add(senlcm.ppsboard_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.utime); 
 
        __strbuf = new char[this.ntp_time.length()]; this.ntp_time.getChars(0, this.ntp_time.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeByte( this.ntp_status ? 1 : 0); 
 
        __strbuf = new char[this.src_type.length()]; this.src_type.getChars(0, this.src_type.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeByte( this.src_pps ? 1 : 0); 
 
        outs.writeShort(this.sync_mode); 
 
        outs.writeShort(this.sync_num); 
 
        __strbuf = new char[this.sync_date.length()]; this.sync_date.getChars(0, this.sync_date.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        __strbuf = new char[this.sync_time.length()]; this.sync_time.getChars(0, this.sync_time.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeShort(this.offset_counts); 
 
        outs.writeDouble(this.offset_usecs); 
 
        outs.writeDouble(this.temperature); 
 
    }
 
    public ppsboard_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public ppsboard_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static senlcm.ppsboard_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        senlcm.ppsboard_t o = new senlcm.ppsboard_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.utime = ins.readLong();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.ntp_time = new String(__strbuf);
 
        this.ntp_status = ins.readByte()!=0;
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.src_type = new String(__strbuf);
 
        this.src_pps = ins.readByte()!=0;
 
        this.sync_mode = ins.readShort();
 
        this.sync_num = ins.readShort();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.sync_date = new String(__strbuf);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.sync_time = new String(__strbuf);
 
        this.offset_counts = ins.readShort();
 
        this.offset_usecs = ins.readDouble();
 
        this.temperature = ins.readDouble();
 
    }
 
    public senlcm.ppsboard_t copy()
    {
        senlcm.ppsboard_t outobj = new senlcm.ppsboard_t();
        outobj.utime = this.utime;
 
        outobj.ntp_time = this.ntp_time;
 
        outobj.ntp_status = this.ntp_status;
 
        outobj.src_type = this.src_type;
 
        outobj.src_pps = this.src_pps;
 
        outobj.sync_mode = this.sync_mode;
 
        outobj.sync_num = this.sync_num;
 
        outobj.sync_date = this.sync_date;
 
        outobj.sync_time = this.sync_time;
 
        outobj.offset_counts = this.offset_counts;
 
        outobj.offset_usecs = this.offset_usecs;
 
        outobj.temperature = this.temperature;
 
        return outobj;
    }
 
}

