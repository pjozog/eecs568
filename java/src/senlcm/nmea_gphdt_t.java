/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package senlcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class nmea_gphdt_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public float h_true;
    public float h_raw;
    public float deviation;
    public float variation;
 
    public nmea_gphdt_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xd45599a324d80cacL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(senlcm.nmea_gphdt_t.class))
            return 0L;
 
        classes.add(senlcm.nmea_gphdt_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeFloat(this.h_true); 
 
        outs.writeFloat(this.h_raw); 
 
        outs.writeFloat(this.deviation); 
 
        outs.writeFloat(this.variation); 
 
    }
 
    public nmea_gphdt_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public nmea_gphdt_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static senlcm.nmea_gphdt_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        senlcm.nmea_gphdt_t o = new senlcm.nmea_gphdt_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.h_true = ins.readFloat();
 
        this.h_raw = ins.readFloat();
 
        this.deviation = ins.readFloat();
 
        this.variation = ins.readFloat();
 
    }
 
    public senlcm.nmea_gphdt_t copy()
    {
        senlcm.nmea_gphdt_t outobj = new senlcm.nmea_gphdt_t();
        outobj.utime = this.utime;
 
        outobj.h_true = this.h_true;
 
        outobj.h_raw = this.h_raw;
 
        outobj.deviation = this.deviation;
 
        outobj.variation = this.variation;
 
        return outobj;
    }
 
}

