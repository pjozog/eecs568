/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package mrlcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class collection_config_t implements lcm.lcm.LCMEncodable
{
    public int collection_id;
    public int n;
    public mrlcm.property_t properties[];
 
    public collection_config_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x98c0e311d21721a8L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(mrlcm.collection_config_t.class))
            return 0L;
 
        classes.add(mrlcm.collection_config_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + mrlcm.property_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.collection_id); 
 
        outs.writeInt(this.n); 
 
        for (int a = 0; a < this.n; a++) {
            this.properties[a]._encodeRecursive(outs); 
        }
 
    }
 
    public collection_config_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public collection_config_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static mrlcm.collection_config_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        mrlcm.collection_config_t o = new mrlcm.collection_config_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.collection_id = ins.readInt();
 
        this.n = ins.readInt();
 
        this.properties = new mrlcm.property_t[(int) n];
        for (int a = 0; a < this.n; a++) {
            this.properties[a] = mrlcm.property_t._decodeRecursiveFactory(ins);
        }
 
    }
 
    public mrlcm.collection_config_t copy()
    {
        mrlcm.collection_config_t outobj = new mrlcm.collection_config_t();
        outobj.collection_id = this.collection_id;
 
        outobj.n = this.n;
 
        outobj.properties = new mrlcm.property_t[(int) n];
        for (int a = 0; a < this.n; a++) {
            outobj.properties[a] = this.properties[a].copy();
        }
 
        return outobj;
    }
 
}

