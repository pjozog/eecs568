package senlcm;

/**
 * @details The following data types were taken from the "AscTec Hummingbird with
 * AutoPilot User's Manual".  I do what I can to make the camelCase and
 * underscores consistent (the coding style is anything but), to
 * avoid naming conflicts. 
 *
 * @author Paul Ozog - paulozog@umich.edu
 * 
 * @brief Lcm type for Asc Tech Pelican UAV
*/
struct pelican_t
{

    int64_t utime;

    double battery_voltage;     //volts
    int16_t status;
    int16_t cpu_load;
    boolean compass_enabled;
    boolean chksum_error;
    boolean flying;
    boolean motors_on;
    int16_t flightMode;
    //Time motors are turning
    int16_t up_time;	        // Units TBD

    double angle[3];		//degress
    int32_t angvel[3];		//raw
    double acc_calib[3];	//g's
    double acc[3];		//g's
    double acc_angle[2];	//degrees
    double acc_absolute_value;	//g's
    int32_t magField[3];	//raw
    double mag_heading;		//degress
    
    int32_t speed[3];		//from IMU - m/s
    double heightImu;		//m
    double dheight;		//m/s
    double dheight_reference;	//m/s
    double height_reference;	//m

    double latitude;		//degress
    double longitude;		//degrees 
    double heightGps;		//m
    double speedGps[2];		//m/s
    double heading;		//degrees
    
    double horizontal_accuracy; // m
    double vertical_accuracy;	// m
    double speed_accuracy;	// m/s
    
    int32_t numSV;		//number of Satellite Vehicles
    int32_t statusGps;		//0x03 = valid GPS fix
    int16_t rcData[8];		//raw
    boolean lock; 

    //from controller (not implemented)
    int32_t nick;	//percent
    int32_t roll;	//percent 
    int32_t yaw;	//percent
    int32_t thrust;	//percent

    const int16_t
	PD_IMURAWDATA=1,
	PD_LLSTATUS=2,
	PD_IMUCALCDATA=3,
	PD_HLSTATUS=4,
	PD_DEBUGDATA=5,
	PD_CTRLOUT=17,
	PD_FLIGHTPARAMS=18,
	PD_CTRLCOMMANDS=19,
	PD_CTRLINTERNAL=20,
	PD_RCDATA=21,
	PD_CTRLSTATUS=22,
	PD_CTRLINPUT=23,
	PD_CTRLFALCON=24,
	PD_WAYPOINT=32,
	PD_CURRENTWAY=33,
	PD_NMEADATA=34,
	PD_GPSDATA=35,
	PD_SINGLEWAYPOINT=36,
	PD_GOTOCOMMAND=37,
	PD_LAUNCHCOMMAND=38,
	PD_LANDCOMMAND=39,
	PD_HOMECOMMAND=40,
	PD_GPSDATAADVANCED=41;

    const int16_t
	LL_STATUS_CMD=1,
	IMU_RAWDATA_CMD=2,
	IMU_CALCDATA_CMD=4,
	RC_DATA_CMD=8,
	CTRL_OUT_CMD=16,
	GPS_DATA_CMD=128,
	CURRENT_WAY_CMD=256,
	GPS_DATA_ADVANCED_CMD=512,
	CAM_DATA_CMD=2048;

    //Taken from user manual:
    /*
    //LL_STATUS MEMBERS
    //battery voltages in mV
    int16_t battery_voltage_1;
    int16_t battery_voltage_2;
    //don’t care
    //int16_t status;
    //Controller cycles per second (should be  ̃1000)
    int16_t cpu_load;
    //don’t care
    byte compass_enabled;
    byte chksum_error;
    byte flying;
    byte motors_on;
    int16_t flightMode;
    //Time motors are turning
    int16_t up_time;

    //IMU_CALCDATA MEMBERS
    //angles derived by integration of gyro_outputs, drift compensated by data
    //fusion; -90000..+90000 pitch(nick) and roll, 0..360000 yaw; 1000 = 1
    //degree
    int32_t angle[3];
    //angular velocities, raw values [16 bit] but bias free
    int32_t angvel[3];
    //acc-sensor outputs, calibrated: -10000..+10000 = -1g..+1g
    int16_t acc_calib[3];
    //horizontal / vertical accelerations: -10000..+10000 = -1g..+1g
    int16_t acc[3];
    //reference angles derived by accelerations only: -90000..+90000; 1000 = 1
    //degree
    int32_t acc_angle_nick;
    int32_t acc_angle_roll;
    //total acceleration measured (10000 = 1g)
    int32_t acc_absolute_value;
    //magnetic field sensors output, offset free and scaled; units not
    //determined, as only the direction of the field vector is taken into
    //account
    int32_t magFiled[3];
    //compass reading: angle reference for angle_yaw: 0..360000; 1000 = 1 degree
    int32_t mag_heading;
    //pseudo speed measurements: integrated accelerations, pulled towards zero;
    //units unknown; used for int16_t-term position stabilization
    int32_t speed[3];
    //height in mm (after data fusion)
    int32_t heightImu;
    //diff. height in mm/s (after data fusion)
    int32_t dheight;
    //diff. height measured by the pressure sensor [mm/s]
    int32_t dheight_reference;
    //height measured by the pressure sensor [mm]
    int32_t height_reference;

    //latitude/longitude in deg * 10ˆ7
    int32_t latitude;
    int32_t longitude;
    //GPS height in mm
    int32_t heightGps;
    //speed in x (E/W) and y(N/S) in mm/s
    int32_t speedGps[2]; //x and y
    //GPS heading in deg * 1000
    int32_t heading;
    //accuracy estimates in mm and mm/s
    int32_t horizontal_accuracy; //uint
    int32_t vertical_accuracy; //uint
    int32_t speed_accuracy; //uint
    //number of satellite vehicles used in NAV solution
    int32_t numSV; //uint
    // GPS status information; 0x03 = valid GPS fix
    int32_t status;

    //channels as read from R/C receiver
    //int16_t channels_in[8]; //uint
    //channels bias free, remapped and scaled to 0..4095
    //int16_t channels_out[8]; //uint
    //Indicator for valid R/C receiption
    //int8_t lock; //uint

    //CONTROLLER MEMBERS
    //attitude controller outputs; 0..200 = -100 ..+100%
    int32_t nick;
    int32_t roll;
    int32_t yaw;
    //current thrust
    int32_t thrust;
    */
}
