/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package senlcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class ms_gx3_45_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public short filter_state;
    public short dynamics_mode;
    public short status_flags;
    public byte gps_timestamp_valid;
    public double gps_timeofweek_seconds;
    public short gps_week_number;
    public byte lat_lon_alt_valid;
    public double lat_lon_alt[];
    public byte lat_lon_alt_std_valid;
    public float lat_lon_alt_std[];
    public byte ned_vel_valid;
    public float ned_vel[];
    public byte ned_vel_std_valid;
    public float ned_vel_std[];
    public byte euler_valid;
    public float euler[];
    public byte euler_std_valid;
    public float euler_std[];
    public byte ang_rate_valid;
    public float ang_rate[];
 
    public ms_gx3_45_t()
    {
        lat_lon_alt = new double[3];
        lat_lon_alt_std = new float[3];
        ned_vel = new float[3];
        ned_vel_std = new float[3];
        euler = new float[3];
        euler_std = new float[3];
        ang_rate = new float[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xeae5faaa7bf153f8L;
 
    public static final short FILTER_STATE_STARTUP = (short) 0;
    public static final short FILTER_STATE_INIT = (short) 1;
    public static final short FILTER_STATE_RUN_VALID = (short) 2;
    public static final short FILTER_STATE_RUN_ERROR = (short) 3;
    public static final short FILTER_DYNM_PORTABLE = (short) 1;
    public static final short FILTER_DYNM_AUTOMOTIVE = (short) 2;
    public static final short FILTER_DYNM_AIRBORNE = (short) 3;
    public static final short FILTER_STAT_ATT_NOT_INIT = (short) 4096;
    public static final short FILTER_STAT_PV_NOT_INIT = (short) 8192;
    public static final short FILTER_STAT_NO_IMU = (short) 1;
    public static final short FILTER_STAT_NO_GPS = (short) 2;
    public static final short FILTER_STAT_MAT_SING = (short) 8;
    public static final short FILTER_STAT_P_HIGH_COV = (short) 16;
    public static final short FILTER_STAT_V_HIGH_COV = (short) 32;
    public static final short FILTER_STAT_A_HIGH_COV = (short) 64;
    public static final short FILTER_STAT_NAN_SOL = (short) 128;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(senlcm.ms_gx3_45_t.class))
            return 0L;
 
        classes.add(senlcm.ms_gx3_45_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeShort(this.filter_state); 
 
        outs.writeShort(this.dynamics_mode); 
 
        outs.writeShort(this.status_flags); 
 
        outs.writeByte(this.gps_timestamp_valid); 
 
        outs.writeDouble(this.gps_timeofweek_seconds); 
 
        outs.writeShort(this.gps_week_number); 
 
        outs.writeByte(this.lat_lon_alt_valid); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.lat_lon_alt[a]); 
        }
 
        outs.writeByte(this.lat_lon_alt_std_valid); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.lat_lon_alt_std[a]); 
        }
 
        outs.writeByte(this.ned_vel_valid); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.ned_vel[a]); 
        }
 
        outs.writeByte(this.ned_vel_std_valid); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.ned_vel_std[a]); 
        }
 
        outs.writeByte(this.euler_valid); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.euler[a]); 
        }
 
        outs.writeByte(this.euler_std_valid); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.euler_std[a]); 
        }
 
        outs.writeByte(this.ang_rate_valid); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.ang_rate[a]); 
        }
 
    }
 
    public ms_gx3_45_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public ms_gx3_45_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static senlcm.ms_gx3_45_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        senlcm.ms_gx3_45_t o = new senlcm.ms_gx3_45_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.filter_state = ins.readShort();
 
        this.dynamics_mode = ins.readShort();
 
        this.status_flags = ins.readShort();
 
        this.gps_timestamp_valid = ins.readByte();
 
        this.gps_timeofweek_seconds = ins.readDouble();
 
        this.gps_week_number = ins.readShort();
 
        this.lat_lon_alt_valid = ins.readByte();
 
        this.lat_lon_alt = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.lat_lon_alt[a] = ins.readDouble();
        }
 
        this.lat_lon_alt_std_valid = ins.readByte();
 
        this.lat_lon_alt_std = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.lat_lon_alt_std[a] = ins.readFloat();
        }
 
        this.ned_vel_valid = ins.readByte();
 
        this.ned_vel = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.ned_vel[a] = ins.readFloat();
        }
 
        this.ned_vel_std_valid = ins.readByte();
 
        this.ned_vel_std = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.ned_vel_std[a] = ins.readFloat();
        }
 
        this.euler_valid = ins.readByte();
 
        this.euler = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.euler[a] = ins.readFloat();
        }
 
        this.euler_std_valid = ins.readByte();
 
        this.euler_std = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.euler_std[a] = ins.readFloat();
        }
 
        this.ang_rate_valid = ins.readByte();
 
        this.ang_rate = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.ang_rate[a] = ins.readFloat();
        }
 
    }
 
    public senlcm.ms_gx3_45_t copy()
    {
        senlcm.ms_gx3_45_t outobj = new senlcm.ms_gx3_45_t();
        outobj.utime = this.utime;
 
        outobj.filter_state = this.filter_state;
 
        outobj.dynamics_mode = this.dynamics_mode;
 
        outobj.status_flags = this.status_flags;
 
        outobj.gps_timestamp_valid = this.gps_timestamp_valid;
 
        outobj.gps_timeofweek_seconds = this.gps_timeofweek_seconds;
 
        outobj.gps_week_number = this.gps_week_number;
 
        outobj.lat_lon_alt_valid = this.lat_lon_alt_valid;
 
        outobj.lat_lon_alt = new double[(int) 3];
        System.arraycopy(this.lat_lon_alt, 0, outobj.lat_lon_alt, 0, 3); 
        outobj.lat_lon_alt_std_valid = this.lat_lon_alt_std_valid;
 
        outobj.lat_lon_alt_std = new float[(int) 3];
        System.arraycopy(this.lat_lon_alt_std, 0, outobj.lat_lon_alt_std, 0, 3); 
        outobj.ned_vel_valid = this.ned_vel_valid;
 
        outobj.ned_vel = new float[(int) 3];
        System.arraycopy(this.ned_vel, 0, outobj.ned_vel, 0, 3); 
        outobj.ned_vel_std_valid = this.ned_vel_std_valid;
 
        outobj.ned_vel_std = new float[(int) 3];
        System.arraycopy(this.ned_vel_std, 0, outobj.ned_vel_std, 0, 3); 
        outobj.euler_valid = this.euler_valid;
 
        outobj.euler = new float[(int) 3];
        System.arraycopy(this.euler, 0, outobj.euler, 0, 3); 
        outobj.euler_std_valid = this.euler_std_valid;
 
        outobj.euler_std = new float[(int) 3];
        System.arraycopy(this.euler_std, 0, outobj.euler_std, 0, 3); 
        outobj.ang_rate_valid = this.ang_rate_valid;
 
        outobj.ang_rate = new float[(int) 3];
        System.arraycopy(this.ang_rate, 0, outobj.ang_rate, 0, 3); 
        return outobj;
    }
 
}

