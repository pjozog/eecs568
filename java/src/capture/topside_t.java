/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package capture;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class topside_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public boolean autonomous_mode;
    public byte resource_origin;
    public int resource_id;
    public byte route_length;
    public byte route[];
 
    public topside_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xafb635b6c9020dafL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(capture.topside_t.class))
            return 0L;
 
        classes.add(capture.topside_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeByte( this.autonomous_mode ? 1 : 0); 
 
        outs.writeByte(this.resource_origin); 
 
        outs.writeInt(this.resource_id); 
 
        outs.writeByte(this.route_length); 
 
        if (this.route_length > 0)
            outs.write(this.route, 0, route_length);
 
    }
 
    public topside_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public topside_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static capture.topside_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        capture.topside_t o = new capture.topside_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.autonomous_mode = ins.readByte()!=0;
 
        this.resource_origin = ins.readByte();
 
        this.resource_id = ins.readInt();
 
        this.route_length = ins.readByte();
 
        this.route = new byte[(int) route_length];
        ins.readFully(this.route, 0, route_length); 
    }
 
    public capture.topside_t copy()
    {
        capture.topside_t outobj = new capture.topside_t();
        outobj.utime = this.utime;
 
        outobj.autonomous_mode = this.autonomous_mode;
 
        outobj.resource_origin = this.resource_origin;
 
        outobj.resource_id = this.resource_id;
 
        outobj.route_length = this.route_length;
 
        outobj.route = new byte[(int) route_length];
        if (this.route_length > 0)
            System.arraycopy(this.route, 0, outobj.route, 0, this.route_length); 
        return outobj;
    }
 
}

