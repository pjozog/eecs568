/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package hauv;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class bs_nvg_t implements lcm.lcm.LCMEncodable
{
    public long time_received;
    public long time;
    public double latitude;
    public String hemisphere_ns;
    public double longitude;
    public String hemisphere_ew;
    public byte quality;
    public double altitude;
    public double depth;
    public double heading;
    public double roll;
    public double pitch;
    public long time_compute;
 
    public bs_nvg_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x06efd82426393146L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(hauv.bs_nvg_t.class))
            return 0L;
 
        classes.add(hauv.bs_nvg_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.time_received); 
 
        outs.writeLong(this.time); 
 
        outs.writeDouble(this.latitude); 
 
        __strbuf = new char[this.hemisphere_ns.length()]; this.hemisphere_ns.getChars(0, this.hemisphere_ns.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeDouble(this.longitude); 
 
        __strbuf = new char[this.hemisphere_ew.length()]; this.hemisphere_ew.getChars(0, this.hemisphere_ew.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeByte(this.quality); 
 
        outs.writeDouble(this.altitude); 
 
        outs.writeDouble(this.depth); 
 
        outs.writeDouble(this.heading); 
 
        outs.writeDouble(this.roll); 
 
        outs.writeDouble(this.pitch); 
 
        outs.writeLong(this.time_compute); 
 
    }
 
    public bs_nvg_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public bs_nvg_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static hauv.bs_nvg_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        hauv.bs_nvg_t o = new hauv.bs_nvg_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.time_received = ins.readLong();
 
        this.time = ins.readLong();
 
        this.latitude = ins.readDouble();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.hemisphere_ns = new String(__strbuf);
 
        this.longitude = ins.readDouble();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.hemisphere_ew = new String(__strbuf);
 
        this.quality = ins.readByte();
 
        this.altitude = ins.readDouble();
 
        this.depth = ins.readDouble();
 
        this.heading = ins.readDouble();
 
        this.roll = ins.readDouble();
 
        this.pitch = ins.readDouble();
 
        this.time_compute = ins.readLong();
 
    }
 
    public hauv.bs_nvg_t copy()
    {
        hauv.bs_nvg_t outobj = new hauv.bs_nvg_t();
        outobj.time_received = this.time_received;
 
        outobj.time = this.time;
 
        outobj.latitude = this.latitude;
 
        outobj.hemisphere_ns = this.hemisphere_ns;
 
        outobj.longitude = this.longitude;
 
        outobj.hemisphere_ew = this.hemisphere_ew;
 
        outobj.quality = this.quality;
 
        outobj.altitude = this.altitude;
 
        outobj.depth = this.depth;
 
        outobj.heading = this.heading;
 
        outobj.roll = this.roll;
 
        outobj.pitch = this.pitch;
 
        outobj.time_compute = this.time_compute;
 
        return outobj;
    }
 
}

