/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package senlcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class gpsd_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public long online;
    public long fix_utime;
    public byte mode;
    public double ept;
    public double latitude;
    public double longitude;
    public double altitude;
    public double eph;
    public double epv;
    public double track;
    public double epd;
    public double speed;
    public double eps;
    public double climb;
    public double epc;
    public double geoidal_separation;
    public short status;
    public short satellites_used;
    public short used[];
    public double pdop;
    public double hdop;
    public double tdop;
    public double gdop;
    public double epe;
    public short satellites_visible;
    public short PRN[];
    public short elevation[];
    public short azimuth[];
    public short ss[];
    public String gps_device;
    public String gps_id;
    public short ndevices;
    public String devicelist[];
 
    public gpsd_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x02cdd4d19fc5d0f5L;
 
    public static final byte MODE_NOT_SEEN = (byte) 0;
    public static final byte MODE_NO_FIX = (byte) 1;
    public static final byte MODE_2D = (byte) 2;
    public static final byte MODE_3D = (byte) 3;
    public static final short STATUS_NO_FIX = (short) 0;
    public static final short STATUS_FIX = (short) 1;
    public static final short STATUS_DGPS_FIX = (short) 2;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(senlcm.gpsd_t.class))
            return 0L;
 
        classes.add(senlcm.gpsd_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.utime); 
 
        outs.writeLong(this.online); 
 
        outs.writeLong(this.fix_utime); 
 
        outs.writeByte(this.mode); 
 
        outs.writeDouble(this.ept); 
 
        outs.writeDouble(this.latitude); 
 
        outs.writeDouble(this.longitude); 
 
        outs.writeDouble(this.altitude); 
 
        outs.writeDouble(this.eph); 
 
        outs.writeDouble(this.epv); 
 
        outs.writeDouble(this.track); 
 
        outs.writeDouble(this.epd); 
 
        outs.writeDouble(this.speed); 
 
        outs.writeDouble(this.eps); 
 
        outs.writeDouble(this.climb); 
 
        outs.writeDouble(this.epc); 
 
        outs.writeDouble(this.geoidal_separation); 
 
        outs.writeShort(this.status); 
 
        outs.writeShort(this.satellites_used); 
 
        for (int a = 0; a < this.satellites_used; a++) {
            outs.writeShort(this.used[a]); 
        }
 
        outs.writeDouble(this.pdop); 
 
        outs.writeDouble(this.hdop); 
 
        outs.writeDouble(this.tdop); 
 
        outs.writeDouble(this.gdop); 
 
        outs.writeDouble(this.epe); 
 
        outs.writeShort(this.satellites_visible); 
 
        for (int a = 0; a < this.satellites_visible; a++) {
            outs.writeShort(this.PRN[a]); 
        }
 
        for (int a = 0; a < this.satellites_visible; a++) {
            outs.writeShort(this.elevation[a]); 
        }
 
        for (int a = 0; a < this.satellites_visible; a++) {
            outs.writeShort(this.azimuth[a]); 
        }
 
        for (int a = 0; a < this.satellites_visible; a++) {
            outs.writeShort(this.ss[a]); 
        }
 
        __strbuf = new char[this.gps_device.length()]; this.gps_device.getChars(0, this.gps_device.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        __strbuf = new char[this.gps_id.length()]; this.gps_id.getChars(0, this.gps_id.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeShort(this.ndevices); 
 
        for (int a = 0; a < this.ndevices; a++) {
            __strbuf = new char[this.devicelist[a].length()]; this.devicelist[a].getChars(0, this.devicelist[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
    }
 
    public gpsd_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public gpsd_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static senlcm.gpsd_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        senlcm.gpsd_t o = new senlcm.gpsd_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.utime = ins.readLong();
 
        this.online = ins.readLong();
 
        this.fix_utime = ins.readLong();
 
        this.mode = ins.readByte();
 
        this.ept = ins.readDouble();
 
        this.latitude = ins.readDouble();
 
        this.longitude = ins.readDouble();
 
        this.altitude = ins.readDouble();
 
        this.eph = ins.readDouble();
 
        this.epv = ins.readDouble();
 
        this.track = ins.readDouble();
 
        this.epd = ins.readDouble();
 
        this.speed = ins.readDouble();
 
        this.eps = ins.readDouble();
 
        this.climb = ins.readDouble();
 
        this.epc = ins.readDouble();
 
        this.geoidal_separation = ins.readDouble();
 
        this.status = ins.readShort();
 
        this.satellites_used = ins.readShort();
 
        this.used = new short[(int) satellites_used];
        for (int a = 0; a < this.satellites_used; a++) {
            this.used[a] = ins.readShort();
        }
 
        this.pdop = ins.readDouble();
 
        this.hdop = ins.readDouble();
 
        this.tdop = ins.readDouble();
 
        this.gdop = ins.readDouble();
 
        this.epe = ins.readDouble();
 
        this.satellites_visible = ins.readShort();
 
        this.PRN = new short[(int) satellites_visible];
        for (int a = 0; a < this.satellites_visible; a++) {
            this.PRN[a] = ins.readShort();
        }
 
        this.elevation = new short[(int) satellites_visible];
        for (int a = 0; a < this.satellites_visible; a++) {
            this.elevation[a] = ins.readShort();
        }
 
        this.azimuth = new short[(int) satellites_visible];
        for (int a = 0; a < this.satellites_visible; a++) {
            this.azimuth[a] = ins.readShort();
        }
 
        this.ss = new short[(int) satellites_visible];
        for (int a = 0; a < this.satellites_visible; a++) {
            this.ss[a] = ins.readShort();
        }
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.gps_device = new String(__strbuf);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.gps_id = new String(__strbuf);
 
        this.ndevices = ins.readShort();
 
        this.devicelist = new String[(int) ndevices];
        for (int a = 0; a < this.ndevices; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.devicelist[a] = new String(__strbuf);
        }
 
    }
 
    public senlcm.gpsd_t copy()
    {
        senlcm.gpsd_t outobj = new senlcm.gpsd_t();
        outobj.utime = this.utime;
 
        outobj.online = this.online;
 
        outobj.fix_utime = this.fix_utime;
 
        outobj.mode = this.mode;
 
        outobj.ept = this.ept;
 
        outobj.latitude = this.latitude;
 
        outobj.longitude = this.longitude;
 
        outobj.altitude = this.altitude;
 
        outobj.eph = this.eph;
 
        outobj.epv = this.epv;
 
        outobj.track = this.track;
 
        outobj.epd = this.epd;
 
        outobj.speed = this.speed;
 
        outobj.eps = this.eps;
 
        outobj.climb = this.climb;
 
        outobj.epc = this.epc;
 
        outobj.geoidal_separation = this.geoidal_separation;
 
        outobj.status = this.status;
 
        outobj.satellites_used = this.satellites_used;
 
        outobj.used = new short[(int) satellites_used];
        if (this.satellites_used > 0)
            System.arraycopy(this.used, 0, outobj.used, 0, this.satellites_used); 
        outobj.pdop = this.pdop;
 
        outobj.hdop = this.hdop;
 
        outobj.tdop = this.tdop;
 
        outobj.gdop = this.gdop;
 
        outobj.epe = this.epe;
 
        outobj.satellites_visible = this.satellites_visible;
 
        outobj.PRN = new short[(int) satellites_visible];
        if (this.satellites_visible > 0)
            System.arraycopy(this.PRN, 0, outobj.PRN, 0, this.satellites_visible); 
        outobj.elevation = new short[(int) satellites_visible];
        if (this.satellites_visible > 0)
            System.arraycopy(this.elevation, 0, outobj.elevation, 0, this.satellites_visible); 
        outobj.azimuth = new short[(int) satellites_visible];
        if (this.satellites_visible > 0)
            System.arraycopy(this.azimuth, 0, outobj.azimuth, 0, this.satellites_visible); 
        outobj.ss = new short[(int) satellites_visible];
        if (this.satellites_visible > 0)
            System.arraycopy(this.ss, 0, outobj.ss, 0, this.satellites_visible); 
        outobj.gps_device = this.gps_device;
 
        outobj.gps_id = this.gps_id;
 
        outobj.ndevices = this.ndevices;
 
        outobj.devicelist = new String[(int) ndevices];
        if (this.ndevices > 0)
            System.arraycopy(this.devicelist, 0, outobj.devicelist, 0, this.ndevices); 
        return outobj;
    }
 
}

