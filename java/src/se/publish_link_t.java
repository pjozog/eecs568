/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package se;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class publish_link_t implements lcm.lcm.LCMEncodable
{
    public long utime1;
    public long utime2;
    public int n;
    public double measurement[];
    public int n2;
    public double sigma[];
    public short link_type;
    public int publisher_id;
    public int sensor_id;
    public int link_id;
    public boolean accept;
    public int accept_code;
    public String comment;
 
    public publish_link_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x71bc62a6b3404e74L;
 
    public static final short LINK_ACCEPTED = (short) 1;
    public static final short LINK_INVALID_MODEL = (short) 2;
    public static final short LINK_LOW_THRESHOLD = (short) 3;
    public static final int LINK_MIN_CORR = 4;
    public static final int LINK_MIN_INLIERS = 5;
    public static final int LINK_SBA = 6;
    public static final int LINK_MDIST_NAV = 7;
    public static final short LINK_POSE2D = (short) 1;
    public static final short LINK_POSE3D = (short) 2;
    public static final short LINK_POSE2DB = (short) 3;
    public static final short LINK_POSE3DB = (short) 4;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(se.publish_link_t.class))
            return 0L;
 
        classes.add(se.publish_link_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.utime1); 
 
        outs.writeLong(this.utime2); 
 
        outs.writeInt(this.n); 
 
        for (int a = 0; a < this.n; a++) {
            outs.writeDouble(this.measurement[a]); 
        }
 
        outs.writeInt(this.n2); 
 
        for (int a = 0; a < this.n2; a++) {
            outs.writeDouble(this.sigma[a]); 
        }
 
        outs.writeShort(this.link_type); 
 
        outs.writeInt(this.publisher_id); 
 
        outs.writeInt(this.sensor_id); 
 
        outs.writeInt(this.link_id); 
 
        outs.writeByte( this.accept ? 1 : 0); 
 
        outs.writeInt(this.accept_code); 
 
        __strbuf = new char[this.comment.length()]; this.comment.getChars(0, this.comment.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
    }
 
    public publish_link_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public publish_link_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static se.publish_link_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        se.publish_link_t o = new se.publish_link_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.utime1 = ins.readLong();
 
        this.utime2 = ins.readLong();
 
        this.n = ins.readInt();
 
        this.measurement = new double[(int) n];
        for (int a = 0; a < this.n; a++) {
            this.measurement[a] = ins.readDouble();
        }
 
        this.n2 = ins.readInt();
 
        this.sigma = new double[(int) n2];
        for (int a = 0; a < this.n2; a++) {
            this.sigma[a] = ins.readDouble();
        }
 
        this.link_type = ins.readShort();
 
        this.publisher_id = ins.readInt();
 
        this.sensor_id = ins.readInt();
 
        this.link_id = ins.readInt();
 
        this.accept = ins.readByte()!=0;
 
        this.accept_code = ins.readInt();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.comment = new String(__strbuf);
 
    }
 
    public se.publish_link_t copy()
    {
        se.publish_link_t outobj = new se.publish_link_t();
        outobj.utime1 = this.utime1;
 
        outobj.utime2 = this.utime2;
 
        outobj.n = this.n;
 
        outobj.measurement = new double[(int) n];
        if (this.n > 0)
            System.arraycopy(this.measurement, 0, outobj.measurement, 0, this.n); 
        outobj.n2 = this.n2;
 
        outobj.sigma = new double[(int) n2];
        if (this.n2 > 0)
            System.arraycopy(this.sigma, 0, outobj.sigma, 0, this.n2); 
        outobj.link_type = this.link_type;
 
        outobj.publisher_id = this.publisher_id;
 
        outobj.sensor_id = this.sensor_id;
 
        outobj.link_id = this.link_id;
 
        outobj.accept = this.accept;
 
        outobj.accept_code = this.accept_code;
 
        outobj.comment = this.comment;
 
        return outobj;
    }
 
}

