/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package hauv;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class vehicle_plan_t implements lcm.lcm.LCMEncodable
{
    public long time;
    public boolean stop;
    public boolean holdStation;
    public boolean heading;
    public boolean broadcast;
    public double headingOffset;
    public double depth;
    public int npoints;
    public double waypoints[][];
 
    public vehicle_plan_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x50c17ab2e1957930L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(hauv.vehicle_plan_t.class))
            return 0L;
 
        classes.add(hauv.vehicle_plan_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.time); 
 
        outs.writeByte( this.stop ? 1 : 0); 
 
        outs.writeByte( this.holdStation ? 1 : 0); 
 
        outs.writeByte( this.heading ? 1 : 0); 
 
        outs.writeByte( this.broadcast ? 1 : 0); 
 
        outs.writeDouble(this.headingOffset); 
 
        outs.writeDouble(this.depth); 
 
        outs.writeInt(this.npoints); 
 
        for (int a = 0; a < this.npoints; a++) {
            for (int b = 0; b < 2; b++) {
                outs.writeDouble(this.waypoints[a][b]); 
            }
        }
 
    }
 
    public vehicle_plan_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public vehicle_plan_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static hauv.vehicle_plan_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        hauv.vehicle_plan_t o = new hauv.vehicle_plan_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.time = ins.readLong();
 
        this.stop = ins.readByte()!=0;
 
        this.holdStation = ins.readByte()!=0;
 
        this.heading = ins.readByte()!=0;
 
        this.broadcast = ins.readByte()!=0;
 
        this.headingOffset = ins.readDouble();
 
        this.depth = ins.readDouble();
 
        this.npoints = ins.readInt();
 
        this.waypoints = new double[(int) npoints][(int) 2];
        for (int a = 0; a < this.npoints; a++) {
            for (int b = 0; b < 2; b++) {
                this.waypoints[a][b] = ins.readDouble();
            }
        }
 
    }
 
    public hauv.vehicle_plan_t copy()
    {
        hauv.vehicle_plan_t outobj = new hauv.vehicle_plan_t();
        outobj.time = this.time;
 
        outobj.stop = this.stop;
 
        outobj.holdStation = this.holdStation;
 
        outobj.heading = this.heading;
 
        outobj.broadcast = this.broadcast;
 
        outobj.headingOffset = this.headingOffset;
 
        outobj.depth = this.depth;
 
        outobj.npoints = this.npoints;
 
        outobj.waypoints = new double[(int) npoints][(int) 2];
        for (int a = 0; a < this.npoints; a++) {
            System.arraycopy(this.waypoints[a], 0, outobj.waypoints[a], 0, 2);        }
 
        return outobj;
    }
 
}

