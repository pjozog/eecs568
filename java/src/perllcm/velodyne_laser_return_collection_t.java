/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package perllcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class velodyne_laser_return_collection_t implements lcm.lcm.LCMEncodable
{
    public int num_lr;
    public perllcm.velodyne_laser_return_t laser_returns[];
    public long utime;
    public double pose[];
    public byte has_pose;
 
    public velodyne_laser_return_collection_t()
    {
        pose = new double[6];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x4c186a156bbd1c7fL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(perllcm.velodyne_laser_return_collection_t.class))
            return 0L;
 
        classes.add(perllcm.velodyne_laser_return_collection_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + perllcm.velodyne_laser_return_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.num_lr); 
 
        for (int a = 0; a < this.num_lr; a++) {
            this.laser_returns[a]._encodeRecursive(outs); 
        }
 
        outs.writeLong(this.utime); 
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.pose[a]); 
        }
 
        outs.writeByte(this.has_pose); 
 
    }
 
    public velodyne_laser_return_collection_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public velodyne_laser_return_collection_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static perllcm.velodyne_laser_return_collection_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        perllcm.velodyne_laser_return_collection_t o = new perllcm.velodyne_laser_return_collection_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.num_lr = ins.readInt();
 
        this.laser_returns = new perllcm.velodyne_laser_return_t[(int) num_lr];
        for (int a = 0; a < this.num_lr; a++) {
            this.laser_returns[a] = perllcm.velodyne_laser_return_t._decodeRecursiveFactory(ins);
        }
 
        this.utime = ins.readLong();
 
        this.pose = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.pose[a] = ins.readDouble();
        }
 
        this.has_pose = ins.readByte();
 
    }
 
    public perllcm.velodyne_laser_return_collection_t copy()
    {
        perllcm.velodyne_laser_return_collection_t outobj = new perllcm.velodyne_laser_return_collection_t();
        outobj.num_lr = this.num_lr;
 
        outobj.laser_returns = new perllcm.velodyne_laser_return_t[(int) num_lr];
        for (int a = 0; a < this.num_lr; a++) {
            outobj.laser_returns[a] = this.laser_returns[a].copy();
        }
 
        outobj.utime = this.utime;
 
        outobj.pose = new double[(int) 6];
        System.arraycopy(this.pose, 0, outobj.pose, 0, 6); 
        outobj.has_pose = this.has_pose;
 
        return outobj;
    }
 
}

