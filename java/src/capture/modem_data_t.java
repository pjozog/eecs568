/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package capture;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class modem_data_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public byte src;
    public byte dest;
    public byte rate;
    public byte packet_type;
    public boolean ack_requested;
    public short data_length;
    public byte data[];
    public byte frame;
    public short dccl_id;
 
    public modem_data_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x2f3c6335f2beb12aL;
 
    public static final byte PACKET_DATA = (byte) 1;
    public static final byte PACKET_MINI = (byte) 2;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(capture.modem_data_t.class))
            return 0L;
 
        classes.add(capture.modem_data_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeByte(this.src); 
 
        outs.writeByte(this.dest); 
 
        outs.writeByte(this.rate); 
 
        outs.writeByte(this.packet_type); 
 
        outs.writeByte( this.ack_requested ? 1 : 0); 
 
        outs.writeShort(this.data_length); 
 
        if (this.data_length > 0)
            outs.write(this.data, 0, data_length);
 
        outs.writeByte(this.frame); 
 
        outs.writeShort(this.dccl_id); 
 
    }
 
    public modem_data_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public modem_data_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static capture.modem_data_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        capture.modem_data_t o = new capture.modem_data_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.src = ins.readByte();
 
        this.dest = ins.readByte();
 
        this.rate = ins.readByte();
 
        this.packet_type = ins.readByte();
 
        this.ack_requested = ins.readByte()!=0;
 
        this.data_length = ins.readShort();
 
        this.data = new byte[(int) data_length];
        ins.readFully(this.data, 0, data_length); 
        this.frame = ins.readByte();
 
        this.dccl_id = ins.readShort();
 
    }
 
    public capture.modem_data_t copy()
    {
        capture.modem_data_t outobj = new capture.modem_data_t();
        outobj.utime = this.utime;
 
        outobj.src = this.src;
 
        outobj.dest = this.dest;
 
        outobj.rate = this.rate;
 
        outobj.packet_type = this.packet_type;
 
        outobj.ack_requested = this.ack_requested;
 
        outobj.data_length = this.data_length;
 
        outobj.data = new byte[(int) data_length];
        if (this.data_length > 0)
            System.arraycopy(this.data, 0, outobj.data, 0, this.data_length); 
        outobj.frame = this.frame;
 
        outobj.dccl_id = this.dccl_id;
 
        return outobj;
    }
 
}

