/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package perllcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class pose3d_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public double mu[];
    public double Sigma[];
 
    public pose3d_t()
    {
        mu = new double[6];
        Sigma = new double[36];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x5b07141c69a22597L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(perllcm.pose3d_t.class))
            return 0L;
 
        classes.add(perllcm.pose3d_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.mu[a]); 
        }
 
        for (int a = 0; a < 36; a++) {
            outs.writeDouble(this.Sigma[a]); 
        }
 
    }
 
    public pose3d_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public pose3d_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static perllcm.pose3d_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        perllcm.pose3d_t o = new perllcm.pose3d_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.mu = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.mu[a] = ins.readDouble();
        }
 
        this.Sigma = new double[(int) 36];
        for (int a = 0; a < 36; a++) {
            this.Sigma[a] = ins.readDouble();
        }
 
    }
 
    public perllcm.pose3d_t copy()
    {
        perllcm.pose3d_t outobj = new perllcm.pose3d_t();
        outobj.utime = this.utime;
 
        outobj.mu = new double[(int) 6];
        System.arraycopy(this.mu, 0, outobj.mu, 0, 6); 
        outobj.Sigma = new double[(int) 36];
        System.arraycopy(this.Sigma, 0, outobj.Sigma, 0, 36); 
        return outobj;
    }
 
}

