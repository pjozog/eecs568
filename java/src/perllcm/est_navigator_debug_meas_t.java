/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package perllcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class est_navigator_debug_meas_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public String id_str;
    public int meas_len;
    public double nu[];
    public double z[];
    public double nis;
    public byte mahal_innov_passed;
 
    public est_navigator_debug_meas_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x0ac4c59588563f95L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(perllcm.est_navigator_debug_meas_t.class))
            return 0L;
 
        classes.add(perllcm.est_navigator_debug_meas_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.utime); 
 
        __strbuf = new char[this.id_str.length()]; this.id_str.getChars(0, this.id_str.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeInt(this.meas_len); 
 
        for (int a = 0; a < this.meas_len; a++) {
            outs.writeDouble(this.nu[a]); 
        }
 
        for (int a = 0; a < this.meas_len; a++) {
            outs.writeDouble(this.z[a]); 
        }
 
        outs.writeDouble(this.nis); 
 
        outs.writeByte(this.mahal_innov_passed); 
 
    }
 
    public est_navigator_debug_meas_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public est_navigator_debug_meas_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static perllcm.est_navigator_debug_meas_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        perllcm.est_navigator_debug_meas_t o = new perllcm.est_navigator_debug_meas_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.utime = ins.readLong();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.id_str = new String(__strbuf);
 
        this.meas_len = ins.readInt();
 
        this.nu = new double[(int) meas_len];
        for (int a = 0; a < this.meas_len; a++) {
            this.nu[a] = ins.readDouble();
        }
 
        this.z = new double[(int) meas_len];
        for (int a = 0; a < this.meas_len; a++) {
            this.z[a] = ins.readDouble();
        }
 
        this.nis = ins.readDouble();
 
        this.mahal_innov_passed = ins.readByte();
 
    }
 
    public perllcm.est_navigator_debug_meas_t copy()
    {
        perllcm.est_navigator_debug_meas_t outobj = new perllcm.est_navigator_debug_meas_t();
        outobj.utime = this.utime;
 
        outobj.id_str = this.id_str;
 
        outobj.meas_len = this.meas_len;
 
        outobj.nu = new double[(int) meas_len];
        if (this.meas_len > 0)
            System.arraycopy(this.nu, 0, outobj.nu, 0, this.meas_len); 
        outobj.z = new double[(int) meas_len];
        if (this.meas_len > 0)
            System.arraycopy(this.z, 0, outobj.z, 0, this.meas_len); 
        outobj.nis = this.nis;
 
        outobj.mahal_innov_passed = this.mahal_innov_passed;
 
        return outobj;
    }
 
}

