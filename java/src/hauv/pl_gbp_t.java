/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package hauv;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class pl_gbp_t implements lcm.lcm.LCMEncodable
{
    public long time;
    public double x;
    public double y;
    public double relative_bearing;
    public boolean is_depth;
    public double depth_altitude;
 
    public pl_gbp_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xce7a1fc8e6d7169bL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(hauv.pl_gbp_t.class))
            return 0L;
 
        classes.add(hauv.pl_gbp_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.time); 
 
        outs.writeDouble(this.x); 
 
        outs.writeDouble(this.y); 
 
        outs.writeDouble(this.relative_bearing); 
 
        outs.writeByte( this.is_depth ? 1 : 0); 
 
        outs.writeDouble(this.depth_altitude); 
 
    }
 
    public pl_gbp_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public pl_gbp_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static hauv.pl_gbp_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        hauv.pl_gbp_t o = new hauv.pl_gbp_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.time = ins.readLong();
 
        this.x = ins.readDouble();
 
        this.y = ins.readDouble();
 
        this.relative_bearing = ins.readDouble();
 
        this.is_depth = ins.readByte()!=0;
 
        this.depth_altitude = ins.readDouble();
 
    }
 
    public hauv.pl_gbp_t copy()
    {
        hauv.pl_gbp_t outobj = new hauv.pl_gbp_t();
        outobj.time = this.time;
 
        outobj.x = this.x;
 
        outobj.y = this.y;
 
        outobj.relative_bearing = this.relative_bearing;
 
        outobj.is_depth = this.is_depth;
 
        outobj.depth_altitude = this.depth_altitude;
 
        return outobj;
    }
 
}

