/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package perllcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class van_saliency_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public int feattype;
    public int npts;
    public double S_L;
    public double bowE;
    public int vocab_len;
    public boolean is_S_L;
    public double S_G;
    public double S_G_max;
    public boolean is_S_G;
 
    public van_saliency_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x9de7735fdc01525eL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(perllcm.van_saliency_t.class))
            return 0L;
 
        classes.add(perllcm.van_saliency_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeInt(this.feattype); 
 
        outs.writeInt(this.npts); 
 
        outs.writeDouble(this.S_L); 
 
        outs.writeDouble(this.bowE); 
 
        outs.writeInt(this.vocab_len); 
 
        outs.writeByte( this.is_S_L ? 1 : 0); 
 
        outs.writeDouble(this.S_G); 
 
        outs.writeDouble(this.S_G_max); 
 
        outs.writeByte( this.is_S_G ? 1 : 0); 
 
    }
 
    public van_saliency_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public van_saliency_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static perllcm.van_saliency_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        perllcm.van_saliency_t o = new perllcm.van_saliency_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.feattype = ins.readInt();
 
        this.npts = ins.readInt();
 
        this.S_L = ins.readDouble();
 
        this.bowE = ins.readDouble();
 
        this.vocab_len = ins.readInt();
 
        this.is_S_L = ins.readByte()!=0;
 
        this.S_G = ins.readDouble();
 
        this.S_G_max = ins.readDouble();
 
        this.is_S_G = ins.readByte()!=0;
 
    }
 
    public perllcm.van_saliency_t copy()
    {
        perllcm.van_saliency_t outobj = new perllcm.van_saliency_t();
        outobj.utime = this.utime;
 
        outobj.feattype = this.feattype;
 
        outobj.npts = this.npts;
 
        outobj.S_L = this.S_L;
 
        outobj.bowE = this.bowE;
 
        outobj.vocab_len = this.vocab_len;
 
        outobj.is_S_L = this.is_S_L;
 
        outobj.S_G = this.S_G;
 
        outobj.S_G_max = this.S_G_max;
 
        outobj.is_S_G = this.is_S_G;
 
        return outobj;
    }
 
}

