/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package senlcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class pelican_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public double battery_voltage;
    public short status;
    public short cpu_load;
    public boolean compass_enabled;
    public boolean chksum_error;
    public boolean flying;
    public boolean motors_on;
    public short flightMode;
    public short up_time;
    public double angle[];
    public int angvel[];
    public double acc_calib[];
    public double acc[];
    public double acc_angle[];
    public double acc_absolute_value;
    public int magField[];
    public double mag_heading;
    public int speed[];
    public double heightImu;
    public double dheight;
    public double dheight_reference;
    public double height_reference;
    public double latitude;
    public double longitude;
    public double heightGps;
    public double speedGps[];
    public double heading;
    public double horizontal_accuracy;
    public double vertical_accuracy;
    public double speed_accuracy;
    public int numSV;
    public int statusGps;
    public short rcData[];
    public boolean lock;
    public int nick;
    public int roll;
    public int yaw;
    public int thrust;
 
    public pelican_t()
    {
        angle = new double[3];
        angvel = new int[3];
        acc_calib = new double[3];
        acc = new double[3];
        acc_angle = new double[2];
        magField = new int[3];
        speed = new int[3];
        speedGps = new double[2];
        rcData = new short[8];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x01213c2b545cbfefL;
 
    public static final short PD_IMURAWDATA = (short) 1;
    public static final short PD_LLSTATUS = (short) 2;
    public static final short PD_IMUCALCDATA = (short) 3;
    public static final short PD_HLSTATUS = (short) 4;
    public static final short PD_DEBUGDATA = (short) 5;
    public static final short PD_CTRLOUT = (short) 17;
    public static final short PD_FLIGHTPARAMS = (short) 18;
    public static final short PD_CTRLCOMMANDS = (short) 19;
    public static final short PD_CTRLINTERNAL = (short) 20;
    public static final short PD_RCDATA = (short) 21;
    public static final short PD_CTRLSTATUS = (short) 22;
    public static final short PD_CTRLINPUT = (short) 23;
    public static final short PD_CTRLFALCON = (short) 24;
    public static final short PD_WAYPOINT = (short) 32;
    public static final short PD_CURRENTWAY = (short) 33;
    public static final short PD_NMEADATA = (short) 34;
    public static final short PD_GPSDATA = (short) 35;
    public static final short PD_SINGLEWAYPOINT = (short) 36;
    public static final short PD_GOTOCOMMAND = (short) 37;
    public static final short PD_LAUNCHCOMMAND = (short) 38;
    public static final short PD_LANDCOMMAND = (short) 39;
    public static final short PD_HOMECOMMAND = (short) 40;
    public static final short PD_GPSDATAADVANCED = (short) 41;
    public static final short LL_STATUS_CMD = (short) 1;
    public static final short IMU_RAWDATA_CMD = (short) 2;
    public static final short IMU_CALCDATA_CMD = (short) 4;
    public static final short RC_DATA_CMD = (short) 8;
    public static final short CTRL_OUT_CMD = (short) 16;
    public static final short GPS_DATA_CMD = (short) 128;
    public static final short CURRENT_WAY_CMD = (short) 256;
    public static final short GPS_DATA_ADVANCED_CMD = (short) 512;
    public static final short CAM_DATA_CMD = (short) 2048;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(senlcm.pelican_t.class))
            return 0L;
 
        classes.add(senlcm.pelican_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeDouble(this.battery_voltage); 
 
        outs.writeShort(this.status); 
 
        outs.writeShort(this.cpu_load); 
 
        outs.writeByte( this.compass_enabled ? 1 : 0); 
 
        outs.writeByte( this.chksum_error ? 1 : 0); 
 
        outs.writeByte( this.flying ? 1 : 0); 
 
        outs.writeByte( this.motors_on ? 1 : 0); 
 
        outs.writeShort(this.flightMode); 
 
        outs.writeShort(this.up_time); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.angle[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeInt(this.angvel[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.acc_calib[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.acc[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeDouble(this.acc_angle[a]); 
        }
 
        outs.writeDouble(this.acc_absolute_value); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeInt(this.magField[a]); 
        }
 
        outs.writeDouble(this.mag_heading); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeInt(this.speed[a]); 
        }
 
        outs.writeDouble(this.heightImu); 
 
        outs.writeDouble(this.dheight); 
 
        outs.writeDouble(this.dheight_reference); 
 
        outs.writeDouble(this.height_reference); 
 
        outs.writeDouble(this.latitude); 
 
        outs.writeDouble(this.longitude); 
 
        outs.writeDouble(this.heightGps); 
 
        for (int a = 0; a < 2; a++) {
            outs.writeDouble(this.speedGps[a]); 
        }
 
        outs.writeDouble(this.heading); 
 
        outs.writeDouble(this.horizontal_accuracy); 
 
        outs.writeDouble(this.vertical_accuracy); 
 
        outs.writeDouble(this.speed_accuracy); 
 
        outs.writeInt(this.numSV); 
 
        outs.writeInt(this.statusGps); 
 
        for (int a = 0; a < 8; a++) {
            outs.writeShort(this.rcData[a]); 
        }
 
        outs.writeByte( this.lock ? 1 : 0); 
 
        outs.writeInt(this.nick); 
 
        outs.writeInt(this.roll); 
 
        outs.writeInt(this.yaw); 
 
        outs.writeInt(this.thrust); 
 
    }
 
    public pelican_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public pelican_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static senlcm.pelican_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        senlcm.pelican_t o = new senlcm.pelican_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.battery_voltage = ins.readDouble();
 
        this.status = ins.readShort();
 
        this.cpu_load = ins.readShort();
 
        this.compass_enabled = ins.readByte()!=0;
 
        this.chksum_error = ins.readByte()!=0;
 
        this.flying = ins.readByte()!=0;
 
        this.motors_on = ins.readByte()!=0;
 
        this.flightMode = ins.readShort();
 
        this.up_time = ins.readShort();
 
        this.angle = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.angle[a] = ins.readDouble();
        }
 
        this.angvel = new int[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.angvel[a] = ins.readInt();
        }
 
        this.acc_calib = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.acc_calib[a] = ins.readDouble();
        }
 
        this.acc = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.acc[a] = ins.readDouble();
        }
 
        this.acc_angle = new double[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.acc_angle[a] = ins.readDouble();
        }
 
        this.acc_absolute_value = ins.readDouble();
 
        this.magField = new int[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.magField[a] = ins.readInt();
        }
 
        this.mag_heading = ins.readDouble();
 
        this.speed = new int[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.speed[a] = ins.readInt();
        }
 
        this.heightImu = ins.readDouble();
 
        this.dheight = ins.readDouble();
 
        this.dheight_reference = ins.readDouble();
 
        this.height_reference = ins.readDouble();
 
        this.latitude = ins.readDouble();
 
        this.longitude = ins.readDouble();
 
        this.heightGps = ins.readDouble();
 
        this.speedGps = new double[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.speedGps[a] = ins.readDouble();
        }
 
        this.heading = ins.readDouble();
 
        this.horizontal_accuracy = ins.readDouble();
 
        this.vertical_accuracy = ins.readDouble();
 
        this.speed_accuracy = ins.readDouble();
 
        this.numSV = ins.readInt();
 
        this.statusGps = ins.readInt();
 
        this.rcData = new short[(int) 8];
        for (int a = 0; a < 8; a++) {
            this.rcData[a] = ins.readShort();
        }
 
        this.lock = ins.readByte()!=0;
 
        this.nick = ins.readInt();
 
        this.roll = ins.readInt();
 
        this.yaw = ins.readInt();
 
        this.thrust = ins.readInt();
 
    }
 
    public senlcm.pelican_t copy()
    {
        senlcm.pelican_t outobj = new senlcm.pelican_t();
        outobj.utime = this.utime;
 
        outobj.battery_voltage = this.battery_voltage;
 
        outobj.status = this.status;
 
        outobj.cpu_load = this.cpu_load;
 
        outobj.compass_enabled = this.compass_enabled;
 
        outobj.chksum_error = this.chksum_error;
 
        outobj.flying = this.flying;
 
        outobj.motors_on = this.motors_on;
 
        outobj.flightMode = this.flightMode;
 
        outobj.up_time = this.up_time;
 
        outobj.angle = new double[(int) 3];
        System.arraycopy(this.angle, 0, outobj.angle, 0, 3); 
        outobj.angvel = new int[(int) 3];
        System.arraycopy(this.angvel, 0, outobj.angvel, 0, 3); 
        outobj.acc_calib = new double[(int) 3];
        System.arraycopy(this.acc_calib, 0, outobj.acc_calib, 0, 3); 
        outobj.acc = new double[(int) 3];
        System.arraycopy(this.acc, 0, outobj.acc, 0, 3); 
        outobj.acc_angle = new double[(int) 2];
        System.arraycopy(this.acc_angle, 0, outobj.acc_angle, 0, 2); 
        outobj.acc_absolute_value = this.acc_absolute_value;
 
        outobj.magField = new int[(int) 3];
        System.arraycopy(this.magField, 0, outobj.magField, 0, 3); 
        outobj.mag_heading = this.mag_heading;
 
        outobj.speed = new int[(int) 3];
        System.arraycopy(this.speed, 0, outobj.speed, 0, 3); 
        outobj.heightImu = this.heightImu;
 
        outobj.dheight = this.dheight;
 
        outobj.dheight_reference = this.dheight_reference;
 
        outobj.height_reference = this.height_reference;
 
        outobj.latitude = this.latitude;
 
        outobj.longitude = this.longitude;
 
        outobj.heightGps = this.heightGps;
 
        outobj.speedGps = new double[(int) 2];
        System.arraycopy(this.speedGps, 0, outobj.speedGps, 0, 2); 
        outobj.heading = this.heading;
 
        outobj.horizontal_accuracy = this.horizontal_accuracy;
 
        outobj.vertical_accuracy = this.vertical_accuracy;
 
        outobj.speed_accuracy = this.speed_accuracy;
 
        outobj.numSV = this.numSV;
 
        outobj.statusGps = this.statusGps;
 
        outobj.rcData = new short[(int) 8];
        System.arraycopy(this.rcData, 0, outobj.rcData, 0, 8); 
        outobj.lock = this.lock;
 
        outobj.nick = this.nick;
 
        outobj.roll = this.roll;
 
        outobj.yaw = this.yaw;
 
        outobj.thrust = this.thrust;
 
        return outobj;
    }
 
}

