/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package vs;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class pallet_slot_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public double pos[];
    public double size[];
    public double dir[];
    public double confidence;
 
    public pallet_slot_t()
    {
        pos = new double[3];
        size = new double[2];
        dir = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xa2ddc6175dff49a5L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(vs.pallet_slot_t.class))
            return 0L;
 
        classes.add(vs.pallet_slot_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.pos[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeDouble(this.size[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.dir[a]); 
        }
 
        outs.writeDouble(this.confidence); 
 
    }
 
    public pallet_slot_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public pallet_slot_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static vs.pallet_slot_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        vs.pallet_slot_t o = new vs.pallet_slot_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.pos = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pos[a] = ins.readDouble();
        }
 
        this.size = new double[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.size[a] = ins.readDouble();
        }
 
        this.dir = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.dir[a] = ins.readDouble();
        }
 
        this.confidence = ins.readDouble();
 
    }
 
    public vs.pallet_slot_t copy()
    {
        vs.pallet_slot_t outobj = new vs.pallet_slot_t();
        outobj.utime = this.utime;
 
        outobj.pos = new double[(int) 3];
        System.arraycopy(this.pos, 0, outobj.pos, 0, 3); 
        outobj.size = new double[(int) 2];
        System.arraycopy(this.size, 0, outobj.size, 0, 2); 
        outobj.dir = new double[(int) 3];
        System.arraycopy(this.dir, 0, outobj.dir, 0, 3); 
        outobj.confidence = this.confidence;
 
        return outobj;
    }
 
}

