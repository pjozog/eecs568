/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package capture;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class modem_range_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public byte src;
    public byte dest;
    public int nowtt;
    public double owtt[];
    public byte ranging_type;
    public byte sender_clk_mode;
    public byte receiver_clk_mode;
 
    public modem_range_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x1740f67141aae3d8L;
 
    public static final byte RANGING_TWO_WAY_PING = (byte) 1;
    public static final byte RANGING_ONE_WAY_SYNCHRONOUS = (byte) 2;
    public static final byte RANGING_REMUS_LBL = (byte) 3;
    public static final byte RANGING_NB_LBL = (byte) 4;
    public static final byte NO_SYNC_TO_PPS_AND_CCCLK_BAD = (byte) 0;
    public static final byte NO_SYNC_TO_PPS_AND_CCCLK_GOOD = (byte) 1;
    public static final byte SYNC_TO_PPS_AND_CCCLK_BAD = (byte) 2;
    public static final byte SYNC_TO_PPS_AND_CCCLK_GOOD = (byte) 3;
    public static final byte UNKNOWN = (byte) 4;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(capture.modem_range_t.class))
            return 0L;
 
        classes.add(capture.modem_range_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeByte(this.src); 
 
        outs.writeByte(this.dest); 
 
        outs.writeInt(this.nowtt); 
 
        for (int a = 0; a < this.nowtt; a++) {
            outs.writeDouble(this.owtt[a]); 
        }
 
        outs.writeByte(this.ranging_type); 
 
        outs.writeByte(this.sender_clk_mode); 
 
        outs.writeByte(this.receiver_clk_mode); 
 
    }
 
    public modem_range_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public modem_range_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static capture.modem_range_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        capture.modem_range_t o = new capture.modem_range_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.src = ins.readByte();
 
        this.dest = ins.readByte();
 
        this.nowtt = ins.readInt();
 
        this.owtt = new double[(int) nowtt];
        for (int a = 0; a < this.nowtt; a++) {
            this.owtt[a] = ins.readDouble();
        }
 
        this.ranging_type = ins.readByte();
 
        this.sender_clk_mode = ins.readByte();
 
        this.receiver_clk_mode = ins.readByte();
 
    }
 
    public capture.modem_range_t copy()
    {
        capture.modem_range_t outobj = new capture.modem_range_t();
        outobj.utime = this.utime;
 
        outobj.src = this.src;
 
        outobj.dest = this.dest;
 
        outobj.nowtt = this.nowtt;
 
        outobj.owtt = new double[(int) nowtt];
        if (this.nowtt > 0)
            System.arraycopy(this.owtt, 0, outobj.owtt, 0, this.nowtt); 
        outobj.ranging_type = this.ranging_type;
 
        outobj.sender_clk_mode = this.sender_clk_mode;
 
        outobj.receiver_clk_mode = this.receiver_clk_mode;
 
        return outobj;
    }
 
}

