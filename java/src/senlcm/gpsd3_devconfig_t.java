/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package senlcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class gpsd3_devconfig_t implements lcm.lcm.LCMEncodable
{
    public String path;
    public short flags;
    public String driver;
    public String subtype;
    public double activated;
    public int baudrate;
    public byte stopbits;
    public double cycle;
    public double mincycle;
    public short driver_mode;
 
    public gpsd3_devconfig_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xaf6ced509cc9000dL;
 
    public static final short FLAGS_SEEN_GPS = (short) 1;
    public static final short FLAGS_SEEN_RTCM2 = (short) 2;
    public static final short FLAGS_SEEN_RTCM3 = (short) 4;
    public static final short FLAGS_SEEN_AIS = (short) 8;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(senlcm.gpsd3_devconfig_t.class))
            return 0L;
 
        classes.add(senlcm.gpsd3_devconfig_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        __strbuf = new char[this.path.length()]; this.path.getChars(0, this.path.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeShort(this.flags); 
 
        __strbuf = new char[this.driver.length()]; this.driver.getChars(0, this.driver.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        __strbuf = new char[this.subtype.length()]; this.subtype.getChars(0, this.subtype.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeDouble(this.activated); 
 
        outs.writeInt(this.baudrate); 
 
        outs.writeByte(this.stopbits); 
 
        outs.writeDouble(this.cycle); 
 
        outs.writeDouble(this.mincycle); 
 
        outs.writeShort(this.driver_mode); 
 
    }
 
    public gpsd3_devconfig_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public gpsd3_devconfig_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static senlcm.gpsd3_devconfig_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        senlcm.gpsd3_devconfig_t o = new senlcm.gpsd3_devconfig_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.path = new String(__strbuf);
 
        this.flags = ins.readShort();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.driver = new String(__strbuf);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.subtype = new String(__strbuf);
 
        this.activated = ins.readDouble();
 
        this.baudrate = ins.readInt();
 
        this.stopbits = ins.readByte();
 
        this.cycle = ins.readDouble();
 
        this.mincycle = ins.readDouble();
 
        this.driver_mode = ins.readShort();
 
    }
 
    public senlcm.gpsd3_devconfig_t copy()
    {
        senlcm.gpsd3_devconfig_t outobj = new senlcm.gpsd3_devconfig_t();
        outobj.path = this.path;
 
        outobj.flags = this.flags;
 
        outobj.driver = this.driver;
 
        outobj.subtype = this.subtype;
 
        outobj.activated = this.activated;
 
        outobj.baudrate = this.baudrate;
 
        outobj.stopbits = this.stopbits;
 
        outobj.cycle = this.cycle;
 
        outobj.mincycle = this.mincycle;
 
        outobj.driver_mode = this.driver_mode;
 
        return outobj;
    }
 
}

