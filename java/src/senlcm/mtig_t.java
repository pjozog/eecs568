/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package senlcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class mtig_t implements lcm.lcm.LCMEncodable
{
    public long ts_unix;
    public long ts_packet;
    public long ts_rtc;
    public short status;
    public short sample_counter;
    public double eul_roll;
    public double eul_pitch;
    public double eul_yaw;
    public double acc_x;
    public double acc_y;
    public double acc_z;
    public double gyr_p;
    public double gyr_q;
    public double gyr_r;
    public double mag_x;
    public double mag_y;
    public double mag_z;
    public double pos_lat;
    public double pos_lon;
    public double pos_alt;
    public double vel_n;
    public double vel_e;
    public double vel_d;
    public double rawgps_pressure;
    public short rawgps_pressureage;
    public long rawgps_timeofweek;
    public double rawgps_pos_lat;
    public double rawgps_pos_lon;
    public double rawgps_pos_alt;
    public double rawgps_vel_n;
    public double rawgps_vel_e;
    public double rawgps_vel_d;
    public double rawgps_accuracy_horiz;
    public double rawgps_accuracy_vert;
    public double rawgps_accuracy_speed;
    public short rawgps_dataage;
    public byte publish_contains;
 
    public mtig_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xc41046b70d271165L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(senlcm.mtig_t.class))
            return 0L;
 
        classes.add(senlcm.mtig_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.ts_unix); 
 
        outs.writeLong(this.ts_packet); 
 
        outs.writeLong(this.ts_rtc); 
 
        outs.writeShort(this.status); 
 
        outs.writeShort(this.sample_counter); 
 
        outs.writeDouble(this.eul_roll); 
 
        outs.writeDouble(this.eul_pitch); 
 
        outs.writeDouble(this.eul_yaw); 
 
        outs.writeDouble(this.acc_x); 
 
        outs.writeDouble(this.acc_y); 
 
        outs.writeDouble(this.acc_z); 
 
        outs.writeDouble(this.gyr_p); 
 
        outs.writeDouble(this.gyr_q); 
 
        outs.writeDouble(this.gyr_r); 
 
        outs.writeDouble(this.mag_x); 
 
        outs.writeDouble(this.mag_y); 
 
        outs.writeDouble(this.mag_z); 
 
        outs.writeDouble(this.pos_lat); 
 
        outs.writeDouble(this.pos_lon); 
 
        outs.writeDouble(this.pos_alt); 
 
        outs.writeDouble(this.vel_n); 
 
        outs.writeDouble(this.vel_e); 
 
        outs.writeDouble(this.vel_d); 
 
        outs.writeDouble(this.rawgps_pressure); 
 
        outs.writeShort(this.rawgps_pressureage); 
 
        outs.writeLong(this.rawgps_timeofweek); 
 
        outs.writeDouble(this.rawgps_pos_lat); 
 
        outs.writeDouble(this.rawgps_pos_lon); 
 
        outs.writeDouble(this.rawgps_pos_alt); 
 
        outs.writeDouble(this.rawgps_vel_n); 
 
        outs.writeDouble(this.rawgps_vel_e); 
 
        outs.writeDouble(this.rawgps_vel_d); 
 
        outs.writeDouble(this.rawgps_accuracy_horiz); 
 
        outs.writeDouble(this.rawgps_accuracy_vert); 
 
        outs.writeDouble(this.rawgps_accuracy_speed); 
 
        outs.writeShort(this.rawgps_dataage); 
 
        outs.writeByte(this.publish_contains); 
 
    }
 
    public mtig_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public mtig_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static senlcm.mtig_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        senlcm.mtig_t o = new senlcm.mtig_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.ts_unix = ins.readLong();
 
        this.ts_packet = ins.readLong();
 
        this.ts_rtc = ins.readLong();
 
        this.status = ins.readShort();
 
        this.sample_counter = ins.readShort();
 
        this.eul_roll = ins.readDouble();
 
        this.eul_pitch = ins.readDouble();
 
        this.eul_yaw = ins.readDouble();
 
        this.acc_x = ins.readDouble();
 
        this.acc_y = ins.readDouble();
 
        this.acc_z = ins.readDouble();
 
        this.gyr_p = ins.readDouble();
 
        this.gyr_q = ins.readDouble();
 
        this.gyr_r = ins.readDouble();
 
        this.mag_x = ins.readDouble();
 
        this.mag_y = ins.readDouble();
 
        this.mag_z = ins.readDouble();
 
        this.pos_lat = ins.readDouble();
 
        this.pos_lon = ins.readDouble();
 
        this.pos_alt = ins.readDouble();
 
        this.vel_n = ins.readDouble();
 
        this.vel_e = ins.readDouble();
 
        this.vel_d = ins.readDouble();
 
        this.rawgps_pressure = ins.readDouble();
 
        this.rawgps_pressureage = ins.readShort();
 
        this.rawgps_timeofweek = ins.readLong();
 
        this.rawgps_pos_lat = ins.readDouble();
 
        this.rawgps_pos_lon = ins.readDouble();
 
        this.rawgps_pos_alt = ins.readDouble();
 
        this.rawgps_vel_n = ins.readDouble();
 
        this.rawgps_vel_e = ins.readDouble();
 
        this.rawgps_vel_d = ins.readDouble();
 
        this.rawgps_accuracy_horiz = ins.readDouble();
 
        this.rawgps_accuracy_vert = ins.readDouble();
 
        this.rawgps_accuracy_speed = ins.readDouble();
 
        this.rawgps_dataage = ins.readShort();
 
        this.publish_contains = ins.readByte();
 
    }
 
    public senlcm.mtig_t copy()
    {
        senlcm.mtig_t outobj = new senlcm.mtig_t();
        outobj.ts_unix = this.ts_unix;
 
        outobj.ts_packet = this.ts_packet;
 
        outobj.ts_rtc = this.ts_rtc;
 
        outobj.status = this.status;
 
        outobj.sample_counter = this.sample_counter;
 
        outobj.eul_roll = this.eul_roll;
 
        outobj.eul_pitch = this.eul_pitch;
 
        outobj.eul_yaw = this.eul_yaw;
 
        outobj.acc_x = this.acc_x;
 
        outobj.acc_y = this.acc_y;
 
        outobj.acc_z = this.acc_z;
 
        outobj.gyr_p = this.gyr_p;
 
        outobj.gyr_q = this.gyr_q;
 
        outobj.gyr_r = this.gyr_r;
 
        outobj.mag_x = this.mag_x;
 
        outobj.mag_y = this.mag_y;
 
        outobj.mag_z = this.mag_z;
 
        outobj.pos_lat = this.pos_lat;
 
        outobj.pos_lon = this.pos_lon;
 
        outobj.pos_alt = this.pos_alt;
 
        outobj.vel_n = this.vel_n;
 
        outobj.vel_e = this.vel_e;
 
        outobj.vel_d = this.vel_d;
 
        outobj.rawgps_pressure = this.rawgps_pressure;
 
        outobj.rawgps_pressureage = this.rawgps_pressureage;
 
        outobj.rawgps_timeofweek = this.rawgps_timeofweek;
 
        outobj.rawgps_pos_lat = this.rawgps_pos_lat;
 
        outobj.rawgps_pos_lon = this.rawgps_pos_lon;
 
        outobj.rawgps_pos_alt = this.rawgps_pos_alt;
 
        outobj.rawgps_vel_n = this.rawgps_vel_n;
 
        outobj.rawgps_vel_e = this.rawgps_vel_e;
 
        outobj.rawgps_vel_d = this.rawgps_vel_d;
 
        outobj.rawgps_accuracy_horiz = this.rawgps_accuracy_horiz;
 
        outobj.rawgps_accuracy_vert = this.rawgps_accuracy_vert;
 
        outobj.rawgps_accuracy_speed = this.rawgps_accuracy_speed;
 
        outobj.rawgps_dataage = this.rawgps_dataage;
 
        outobj.publish_contains = this.publish_contains;
 
        return outobj;
    }
 
}

