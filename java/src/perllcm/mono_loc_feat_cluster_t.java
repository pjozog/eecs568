/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package perllcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class mono_loc_feat_cluster_t implements lcm.lcm.LCMEncodable
{
    public long num_feats;
    public perllcm.mono_loc_feat_t feats[];
    public double mean_X[];
    public double mean_view_aiz;
 
    public mono_loc_feat_cluster_t()
    {
        mean_X = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x4f416ea639f0e1d7L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(perllcm.mono_loc_feat_cluster_t.class))
            return 0L;
 
        classes.add(perllcm.mono_loc_feat_cluster_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + perllcm.mono_loc_feat_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.num_feats); 
 
        for (int a = 0; a < this.num_feats; a++) {
            this.feats[a]._encodeRecursive(outs); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.mean_X[a]); 
        }
 
        outs.writeDouble(this.mean_view_aiz); 
 
    }
 
    public mono_loc_feat_cluster_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public mono_loc_feat_cluster_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static perllcm.mono_loc_feat_cluster_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        perllcm.mono_loc_feat_cluster_t o = new perllcm.mono_loc_feat_cluster_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.num_feats = ins.readLong();
 
        this.feats = new perllcm.mono_loc_feat_t[(int) num_feats];
        for (int a = 0; a < this.num_feats; a++) {
            this.feats[a] = perllcm.mono_loc_feat_t._decodeRecursiveFactory(ins);
        }
 
        this.mean_X = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.mean_X[a] = ins.readDouble();
        }
 
        this.mean_view_aiz = ins.readDouble();
 
    }
 
    public perllcm.mono_loc_feat_cluster_t copy()
    {
        perllcm.mono_loc_feat_cluster_t outobj = new perllcm.mono_loc_feat_cluster_t();
        outobj.num_feats = this.num_feats;
 
        outobj.feats = new perllcm.mono_loc_feat_t[(int) num_feats];
        for (int a = 0; a < this.num_feats; a++) {
            outobj.feats[a] = this.feats[a].copy();
        }
 
        outobj.mean_X = new double[(int) 3];
        System.arraycopy(this.mean_X, 0, outobj.mean_X, 0, 3); 
        outobj.mean_view_aiz = this.mean_view_aiz;
 
        return outobj;
    }
 
}

