/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package perllcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class isam_return_state_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public int n;
    public perllcm.pose3d_t poses[];
    public int k;
    public long timestamps[];
    public int m;
    public double covariance[];
    public short state_type;
 
    public isam_return_state_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x99d9bd57529d23bcL;
 
    public static final short POSE = (short) 1;
    public static final short COV_FULL = (short) 2;
    public static final short COV_BLOCK = (short) 4;
    public static final short COV_RIGHTCOL = (short) 8;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(perllcm.isam_return_state_t.class))
            return 0L;
 
        classes.add(perllcm.isam_return_state_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + perllcm.pose3d_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeInt(this.n); 
 
        for (int a = 0; a < this.n; a++) {
            this.poses[a]._encodeRecursive(outs); 
        }
 
        outs.writeInt(this.k); 
 
        for (int a = 0; a < this.k; a++) {
            outs.writeLong(this.timestamps[a]); 
        }
 
        outs.writeInt(this.m); 
 
        for (int a = 0; a < this.m; a++) {
            outs.writeDouble(this.covariance[a]); 
        }
 
        outs.writeShort(this.state_type); 
 
    }
 
    public isam_return_state_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public isam_return_state_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static perllcm.isam_return_state_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        perllcm.isam_return_state_t o = new perllcm.isam_return_state_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.n = ins.readInt();
 
        this.poses = new perllcm.pose3d_t[(int) n];
        for (int a = 0; a < this.n; a++) {
            this.poses[a] = perllcm.pose3d_t._decodeRecursiveFactory(ins);
        }
 
        this.k = ins.readInt();
 
        this.timestamps = new long[(int) k];
        for (int a = 0; a < this.k; a++) {
            this.timestamps[a] = ins.readLong();
        }
 
        this.m = ins.readInt();
 
        this.covariance = new double[(int) m];
        for (int a = 0; a < this.m; a++) {
            this.covariance[a] = ins.readDouble();
        }
 
        this.state_type = ins.readShort();
 
    }
 
    public perllcm.isam_return_state_t copy()
    {
        perllcm.isam_return_state_t outobj = new perllcm.isam_return_state_t();
        outobj.utime = this.utime;
 
        outobj.n = this.n;
 
        outobj.poses = new perllcm.pose3d_t[(int) n];
        for (int a = 0; a < this.n; a++) {
            outobj.poses[a] = this.poses[a].copy();
        }
 
        outobj.k = this.k;
 
        outobj.timestamps = new long[(int) k];
        if (this.k > 0)
            System.arraycopy(this.timestamps, 0, outobj.timestamps, 0, this.k); 
        outobj.m = this.m;
 
        outobj.covariance = new double[(int) m];
        if (this.m > 0)
            System.arraycopy(this.covariance, 0, outobj.covariance, 0, this.m); 
        outobj.state_type = this.state_type;
 
        return outobj;
    }
 
}

