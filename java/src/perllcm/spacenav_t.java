/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package perllcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class spacenav_t implements lcm.lcm.LCMEncodable
{
    public int x;
    public int y;
    public int z;
    public int rot_x;
    public int rot_y;
    public int rot_z;
 
    public spacenav_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x0e4afcbbf6f6bba4L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(perllcm.spacenav_t.class))
            return 0L;
 
        classes.add(perllcm.spacenav_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.x); 
 
        outs.writeInt(this.y); 
 
        outs.writeInt(this.z); 
 
        outs.writeInt(this.rot_x); 
 
        outs.writeInt(this.rot_y); 
 
        outs.writeInt(this.rot_z); 
 
    }
 
    public spacenav_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public spacenav_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static perllcm.spacenav_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        perllcm.spacenav_t o = new perllcm.spacenav_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.x = ins.readInt();
 
        this.y = ins.readInt();
 
        this.z = ins.readInt();
 
        this.rot_x = ins.readInt();
 
        this.rot_y = ins.readInt();
 
        this.rot_z = ins.readInt();
 
    }
 
    public perllcm.spacenav_t copy()
    {
        perllcm.spacenav_t outobj = new perllcm.spacenav_t();
        outobj.x = this.x;
 
        outobj.y = this.y;
 
        outobj.z = this.z;
 
        outobj.rot_x = this.rot_x;
 
        outobj.rot_y = this.rot_y;
 
        outobj.rot_z = this.rot_z;
 
        return outobj;
    }
 
}

