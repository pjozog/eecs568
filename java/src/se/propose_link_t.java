/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package se;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class propose_link_t implements lcm.lcm.LCMEncodable
{
    public int sensor_id;
    public int link_id;
    public long utime1;
    public long utime2;
    public double x12[];
    public double sigma[];
    public double x1s[];
    public double x2s[];
    public int plink_max;
 
    public propose_link_t()
    {
        x12 = new double[6];
        sigma = new double[36];
        x1s = new double[6];
        x2s = new double[6];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x5f4644e2d0db98e7L;
 
    public static final short SENSOR_ID_ODO = (short) 1;
    public static final short SENSOR_ID_SONAR = (short) 2;
    public static final short SENSOR_ID_CAMERA = (short) 4;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(se.propose_link_t.class))
            return 0L;
 
        classes.add(se.propose_link_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.sensor_id); 
 
        outs.writeInt(this.link_id); 
 
        outs.writeLong(this.utime1); 
 
        outs.writeLong(this.utime2); 
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.x12[a]); 
        }
 
        for (int a = 0; a < 36; a++) {
            outs.writeDouble(this.sigma[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.x1s[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.x2s[a]); 
        }
 
        outs.writeInt(this.plink_max); 
 
    }
 
    public propose_link_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public propose_link_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static se.propose_link_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        se.propose_link_t o = new se.propose_link_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.sensor_id = ins.readInt();
 
        this.link_id = ins.readInt();
 
        this.utime1 = ins.readLong();
 
        this.utime2 = ins.readLong();
 
        this.x12 = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.x12[a] = ins.readDouble();
        }
 
        this.sigma = new double[(int) 36];
        for (int a = 0; a < 36; a++) {
            this.sigma[a] = ins.readDouble();
        }
 
        this.x1s = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.x1s[a] = ins.readDouble();
        }
 
        this.x2s = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.x2s[a] = ins.readDouble();
        }
 
        this.plink_max = ins.readInt();
 
    }
 
    public se.propose_link_t copy()
    {
        se.propose_link_t outobj = new se.propose_link_t();
        outobj.sensor_id = this.sensor_id;
 
        outobj.link_id = this.link_id;
 
        outobj.utime1 = this.utime1;
 
        outobj.utime2 = this.utime2;
 
        outobj.x12 = new double[(int) 6];
        System.arraycopy(this.x12, 0, outobj.x12, 0, 6); 
        outobj.sigma = new double[(int) 36];
        System.arraycopy(this.sigma, 0, outobj.sigma, 0, 36); 
        outobj.x1s = new double[(int) 6];
        System.arraycopy(this.x1s, 0, outobj.x1s, 0, 6); 
        outobj.x2s = new double[(int) 6];
        System.arraycopy(this.x2s, 0, outobj.x2s, 0, 6); 
        outobj.plink_max = this.plink_max;
 
        return outobj;
    }
 
}

