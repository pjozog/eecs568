/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package perllcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class velodyne_laser_return_t implements lcm.lcm.LCMEncodable
{
    public double xyz[];
    public double raw_range;
    public double range;
    public double ctheta;
    public double theta;
    public double phi;
    public byte intensity;
    public int physical;
    public int logical;
    public byte motion_compensated;
    public long utime;
 
    public velodyne_laser_return_t()
    {
        xyz = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xc0817e92b3017312L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(perllcm.velodyne_laser_return_t.class))
            return 0L;
 
        classes.add(perllcm.velodyne_laser_return_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.xyz[a]); 
        }
 
        outs.writeDouble(this.raw_range); 
 
        outs.writeDouble(this.range); 
 
        outs.writeDouble(this.ctheta); 
 
        outs.writeDouble(this.theta); 
 
        outs.writeDouble(this.phi); 
 
        outs.writeByte(this.intensity); 
 
        outs.writeInt(this.physical); 
 
        outs.writeInt(this.logical); 
 
        outs.writeByte(this.motion_compensated); 
 
        outs.writeLong(this.utime); 
 
    }
 
    public velodyne_laser_return_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public velodyne_laser_return_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static perllcm.velodyne_laser_return_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        perllcm.velodyne_laser_return_t o = new perllcm.velodyne_laser_return_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.xyz = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.xyz[a] = ins.readDouble();
        }
 
        this.raw_range = ins.readDouble();
 
        this.range = ins.readDouble();
 
        this.ctheta = ins.readDouble();
 
        this.theta = ins.readDouble();
 
        this.phi = ins.readDouble();
 
        this.intensity = ins.readByte();
 
        this.physical = ins.readInt();
 
        this.logical = ins.readInt();
 
        this.motion_compensated = ins.readByte();
 
        this.utime = ins.readLong();
 
    }
 
    public perllcm.velodyne_laser_return_t copy()
    {
        perllcm.velodyne_laser_return_t outobj = new perllcm.velodyne_laser_return_t();
        outobj.xyz = new double[(int) 3];
        System.arraycopy(this.xyz, 0, outobj.xyz, 0, 3); 
        outobj.raw_range = this.raw_range;
 
        outobj.range = this.range;
 
        outobj.ctheta = this.ctheta;
 
        outobj.theta = this.theta;
 
        outobj.phi = this.phi;
 
        outobj.intensity = this.intensity;
 
        outobj.physical = this.physical;
 
        outobj.logical = this.logical;
 
        outobj.motion_compensated = this.motion_compensated;
 
        outobj.utime = this.utime;
 
        return outobj;
    }
 
}

