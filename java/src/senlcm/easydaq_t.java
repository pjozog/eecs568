/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package senlcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class easydaq_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public boolean self;
    public senlcm.relay_t relay[];
 
    public easydaq_t()
    {
        relay = new senlcm.relay_t[8];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x7222b91c07073254L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(senlcm.easydaq_t.class))
            return 0L;
 
        classes.add(senlcm.easydaq_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + senlcm.relay_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeByte( this.self ? 1 : 0); 
 
        for (int a = 0; a < 8; a++) {
            this.relay[a]._encodeRecursive(outs); 
        }
 
    }
 
    public easydaq_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public easydaq_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static senlcm.easydaq_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        senlcm.easydaq_t o = new senlcm.easydaq_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.self = ins.readByte()!=0;
 
        this.relay = new senlcm.relay_t[(int) 8];
        for (int a = 0; a < 8; a++) {
            this.relay[a] = senlcm.relay_t._decodeRecursiveFactory(ins);
        }
 
    }
 
    public senlcm.easydaq_t copy()
    {
        senlcm.easydaq_t outobj = new senlcm.easydaq_t();
        outobj.utime = this.utime;
 
        outobj.self = this.self;
 
        outobj.relay = new senlcm.relay_t[(int) 8];
        for (int a = 0; a < 8; a++) {
            outobj.relay[a] = this.relay[a].copy();
        }
 
        return outobj;
    }
 
}

