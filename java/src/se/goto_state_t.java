/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package se;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class goto_state_t implements lcm.lcm.LCMEncodable
{
    public int mode;
    public double waypoint_horizontal;
    public double waypoint_vertical;
    public double original_horizontal;
    public double original_vertical;
    public double waypoint[];
    public double original[];
 
    public goto_state_t()
    {
        waypoint = new double[6];
        original = new double[6];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xf134d6ec59fa34c9L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(se.goto_state_t.class))
            return 0L;
 
        classes.add(se.goto_state_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.mode); 
 
        outs.writeDouble(this.waypoint_horizontal); 
 
        outs.writeDouble(this.waypoint_vertical); 
 
        outs.writeDouble(this.original_horizontal); 
 
        outs.writeDouble(this.original_vertical); 
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.waypoint[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.original[a]); 
        }
 
    }
 
    public goto_state_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public goto_state_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static se.goto_state_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        se.goto_state_t o = new se.goto_state_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.mode = ins.readInt();
 
        this.waypoint_horizontal = ins.readDouble();
 
        this.waypoint_vertical = ins.readDouble();
 
        this.original_horizontal = ins.readDouble();
 
        this.original_vertical = ins.readDouble();
 
        this.waypoint = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.waypoint[a] = ins.readDouble();
        }
 
        this.original = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.original[a] = ins.readDouble();
        }
 
    }
 
    public se.goto_state_t copy()
    {
        se.goto_state_t outobj = new se.goto_state_t();
        outobj.mode = this.mode;
 
        outobj.waypoint_horizontal = this.waypoint_horizontal;
 
        outobj.waypoint_vertical = this.waypoint_vertical;
 
        outobj.original_horizontal = this.original_horizontal;
 
        outobj.original_vertical = this.original_vertical;
 
        outobj.waypoint = new double[(int) 6];
        System.arraycopy(this.waypoint, 0, outobj.waypoint, 0, 6); 
        outobj.original = new double[(int) 6];
        System.arraycopy(this.original, 0, outobj.original, 0, 6); 
        return outobj;
    }
 
}

