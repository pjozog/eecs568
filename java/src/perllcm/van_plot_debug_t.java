/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package perllcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class van_plot_debug_t implements lcm.lcm.LCMEncodable
{
    public long utime_i;
    public long utime_j;
    public int n_feat_types;
    public int npts_each_type[];
    public int n_in_pccs;
    public int isel_pccs_i[];
    public int isel_pccs_j[];
    public int n_in;
    public int isel[];
    public double model[];
    public int dof;
    public double nav21[];
    public double x21[];
    public double cov21[];
    public int npts3d;
    public float x[];
    public float y[];
    public float z[];
    public boolean plt_ellipses;
    public int img_w;
    public int img_h;
    public double chiSquare2dof;
    public double F21[];
    public float uv1_sample[];
    public float uv2p_sample[];
    public float cov2p_sample[];
    public float uv2_sample[];
    public float uv1p_sample[];
    public float cov1p_sample[];
    public int model_gic;
    public int reg_result;
    public int errmsg;
    public int nlink_remaining;
 
    public van_plot_debug_t()
    {
        model = new double[9];
        nav21 = new double[6];
        x21 = new double[6];
        cov21 = new double[36];
        F21 = new double[9];
        uv1_sample = new float[16];
        uv2p_sample = new float[16];
        cov2p_sample = new float[32];
        uv2_sample = new float[16];
        uv1p_sample = new float[16];
        cov1p_sample = new float[32];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x482360540e8029b9L;
 
    public static final int GIC_NONE = 0;
    public static final int GIC_H = 1;
    public static final int GIC_F = 2;
    public static final int REG_FAIL = 0;
    public static final int REG_SUCC = 1;
    public static final int MSG_INVALID = 0;
    public static final int MSG_VALID = 1;
    public static final int MSG_QUIT = 2;
    public static final int MSG_BATCH = 3;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(perllcm.van_plot_debug_t.class))
            return 0L;
 
        classes.add(perllcm.van_plot_debug_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime_i); 
 
        outs.writeLong(this.utime_j); 
 
        outs.writeInt(this.n_feat_types); 
 
        for (int a = 0; a < this.n_feat_types; a++) {
            outs.writeInt(this.npts_each_type[a]); 
        }
 
        outs.writeInt(this.n_in_pccs); 
 
        for (int a = 0; a < this.n_in_pccs; a++) {
            outs.writeInt(this.isel_pccs_i[a]); 
        }
 
        for (int a = 0; a < this.n_in_pccs; a++) {
            outs.writeInt(this.isel_pccs_j[a]); 
        }
 
        outs.writeInt(this.n_in); 
 
        for (int a = 0; a < this.n_in; a++) {
            outs.writeInt(this.isel[a]); 
        }
 
        for (int a = 0; a < 9; a++) {
            outs.writeDouble(this.model[a]); 
        }
 
        outs.writeInt(this.dof); 
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.nav21[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.x21[a]); 
        }
 
        for (int a = 0; a < 36; a++) {
            outs.writeDouble(this.cov21[a]); 
        }
 
        outs.writeInt(this.npts3d); 
 
        for (int a = 0; a < this.npts3d; a++) {
            outs.writeFloat(this.x[a]); 
        }
 
        for (int a = 0; a < this.npts3d; a++) {
            outs.writeFloat(this.y[a]); 
        }
 
        for (int a = 0; a < this.npts3d; a++) {
            outs.writeFloat(this.z[a]); 
        }
 
        outs.writeByte( this.plt_ellipses ? 1 : 0); 
 
        outs.writeInt(this.img_w); 
 
        outs.writeInt(this.img_h); 
 
        outs.writeDouble(this.chiSquare2dof); 
 
        for (int a = 0; a < 9; a++) {
            outs.writeDouble(this.F21[a]); 
        }
 
        for (int a = 0; a < 16; a++) {
            outs.writeFloat(this.uv1_sample[a]); 
        }
 
        for (int a = 0; a < 16; a++) {
            outs.writeFloat(this.uv2p_sample[a]); 
        }
 
        for (int a = 0; a < 32; a++) {
            outs.writeFloat(this.cov2p_sample[a]); 
        }
 
        for (int a = 0; a < 16; a++) {
            outs.writeFloat(this.uv2_sample[a]); 
        }
 
        for (int a = 0; a < 16; a++) {
            outs.writeFloat(this.uv1p_sample[a]); 
        }
 
        for (int a = 0; a < 32; a++) {
            outs.writeFloat(this.cov1p_sample[a]); 
        }
 
        outs.writeInt(this.model_gic); 
 
        outs.writeInt(this.reg_result); 
 
        outs.writeInt(this.errmsg); 
 
        outs.writeInt(this.nlink_remaining); 
 
    }
 
    public van_plot_debug_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public van_plot_debug_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static perllcm.van_plot_debug_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        perllcm.van_plot_debug_t o = new perllcm.van_plot_debug_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime_i = ins.readLong();
 
        this.utime_j = ins.readLong();
 
        this.n_feat_types = ins.readInt();
 
        this.npts_each_type = new int[(int) n_feat_types];
        for (int a = 0; a < this.n_feat_types; a++) {
            this.npts_each_type[a] = ins.readInt();
        }
 
        this.n_in_pccs = ins.readInt();
 
        this.isel_pccs_i = new int[(int) n_in_pccs];
        for (int a = 0; a < this.n_in_pccs; a++) {
            this.isel_pccs_i[a] = ins.readInt();
        }
 
        this.isel_pccs_j = new int[(int) n_in_pccs];
        for (int a = 0; a < this.n_in_pccs; a++) {
            this.isel_pccs_j[a] = ins.readInt();
        }
 
        this.n_in = ins.readInt();
 
        this.isel = new int[(int) n_in];
        for (int a = 0; a < this.n_in; a++) {
            this.isel[a] = ins.readInt();
        }
 
        this.model = new double[(int) 9];
        for (int a = 0; a < 9; a++) {
            this.model[a] = ins.readDouble();
        }
 
        this.dof = ins.readInt();
 
        this.nav21 = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.nav21[a] = ins.readDouble();
        }
 
        this.x21 = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.x21[a] = ins.readDouble();
        }
 
        this.cov21 = new double[(int) 36];
        for (int a = 0; a < 36; a++) {
            this.cov21[a] = ins.readDouble();
        }
 
        this.npts3d = ins.readInt();
 
        this.x = new float[(int) npts3d];
        for (int a = 0; a < this.npts3d; a++) {
            this.x[a] = ins.readFloat();
        }
 
        this.y = new float[(int) npts3d];
        for (int a = 0; a < this.npts3d; a++) {
            this.y[a] = ins.readFloat();
        }
 
        this.z = new float[(int) npts3d];
        for (int a = 0; a < this.npts3d; a++) {
            this.z[a] = ins.readFloat();
        }
 
        this.plt_ellipses = ins.readByte()!=0;
 
        this.img_w = ins.readInt();
 
        this.img_h = ins.readInt();
 
        this.chiSquare2dof = ins.readDouble();
 
        this.F21 = new double[(int) 9];
        for (int a = 0; a < 9; a++) {
            this.F21[a] = ins.readDouble();
        }
 
        this.uv1_sample = new float[(int) 16];
        for (int a = 0; a < 16; a++) {
            this.uv1_sample[a] = ins.readFloat();
        }
 
        this.uv2p_sample = new float[(int) 16];
        for (int a = 0; a < 16; a++) {
            this.uv2p_sample[a] = ins.readFloat();
        }
 
        this.cov2p_sample = new float[(int) 32];
        for (int a = 0; a < 32; a++) {
            this.cov2p_sample[a] = ins.readFloat();
        }
 
        this.uv2_sample = new float[(int) 16];
        for (int a = 0; a < 16; a++) {
            this.uv2_sample[a] = ins.readFloat();
        }
 
        this.uv1p_sample = new float[(int) 16];
        for (int a = 0; a < 16; a++) {
            this.uv1p_sample[a] = ins.readFloat();
        }
 
        this.cov1p_sample = new float[(int) 32];
        for (int a = 0; a < 32; a++) {
            this.cov1p_sample[a] = ins.readFloat();
        }
 
        this.model_gic = ins.readInt();
 
        this.reg_result = ins.readInt();
 
        this.errmsg = ins.readInt();
 
        this.nlink_remaining = ins.readInt();
 
    }
 
    public perllcm.van_plot_debug_t copy()
    {
        perllcm.van_plot_debug_t outobj = new perllcm.van_plot_debug_t();
        outobj.utime_i = this.utime_i;
 
        outobj.utime_j = this.utime_j;
 
        outobj.n_feat_types = this.n_feat_types;
 
        outobj.npts_each_type = new int[(int) n_feat_types];
        if (this.n_feat_types > 0)
            System.arraycopy(this.npts_each_type, 0, outobj.npts_each_type, 0, this.n_feat_types); 
        outobj.n_in_pccs = this.n_in_pccs;
 
        outobj.isel_pccs_i = new int[(int) n_in_pccs];
        if (this.n_in_pccs > 0)
            System.arraycopy(this.isel_pccs_i, 0, outobj.isel_pccs_i, 0, this.n_in_pccs); 
        outobj.isel_pccs_j = new int[(int) n_in_pccs];
        if (this.n_in_pccs > 0)
            System.arraycopy(this.isel_pccs_j, 0, outobj.isel_pccs_j, 0, this.n_in_pccs); 
        outobj.n_in = this.n_in;
 
        outobj.isel = new int[(int) n_in];
        if (this.n_in > 0)
            System.arraycopy(this.isel, 0, outobj.isel, 0, this.n_in); 
        outobj.model = new double[(int) 9];
        System.arraycopy(this.model, 0, outobj.model, 0, 9); 
        outobj.dof = this.dof;
 
        outobj.nav21 = new double[(int) 6];
        System.arraycopy(this.nav21, 0, outobj.nav21, 0, 6); 
        outobj.x21 = new double[(int) 6];
        System.arraycopy(this.x21, 0, outobj.x21, 0, 6); 
        outobj.cov21 = new double[(int) 36];
        System.arraycopy(this.cov21, 0, outobj.cov21, 0, 36); 
        outobj.npts3d = this.npts3d;
 
        outobj.x = new float[(int) npts3d];
        if (this.npts3d > 0)
            System.arraycopy(this.x, 0, outobj.x, 0, this.npts3d); 
        outobj.y = new float[(int) npts3d];
        if (this.npts3d > 0)
            System.arraycopy(this.y, 0, outobj.y, 0, this.npts3d); 
        outobj.z = new float[(int) npts3d];
        if (this.npts3d > 0)
            System.arraycopy(this.z, 0, outobj.z, 0, this.npts3d); 
        outobj.plt_ellipses = this.plt_ellipses;
 
        outobj.img_w = this.img_w;
 
        outobj.img_h = this.img_h;
 
        outobj.chiSquare2dof = this.chiSquare2dof;
 
        outobj.F21 = new double[(int) 9];
        System.arraycopy(this.F21, 0, outobj.F21, 0, 9); 
        outobj.uv1_sample = new float[(int) 16];
        System.arraycopy(this.uv1_sample, 0, outobj.uv1_sample, 0, 16); 
        outobj.uv2p_sample = new float[(int) 16];
        System.arraycopy(this.uv2p_sample, 0, outobj.uv2p_sample, 0, 16); 
        outobj.cov2p_sample = new float[(int) 32];
        System.arraycopy(this.cov2p_sample, 0, outobj.cov2p_sample, 0, 32); 
        outobj.uv2_sample = new float[(int) 16];
        System.arraycopy(this.uv2_sample, 0, outobj.uv2_sample, 0, 16); 
        outobj.uv1p_sample = new float[(int) 16];
        System.arraycopy(this.uv1p_sample, 0, outobj.uv1p_sample, 0, 16); 
        outobj.cov1p_sample = new float[(int) 32];
        System.arraycopy(this.cov1p_sample, 0, outobj.cov1p_sample, 0, 32); 
        outobj.model_gic = this.model_gic;
 
        outobj.reg_result = this.reg_result;
 
        outobj.errmsg = this.errmsg;
 
        outobj.nlink_remaining = this.nlink_remaining;
 
        return outobj;
    }
 
}

