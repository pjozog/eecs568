/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package se;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class save_isam_t implements lcm.lcm.LCMEncodable
{
    public long timestamp;
    public long id;
    public int n;
    public String line;
    public short type;
    public short sensor;
 
    public save_isam_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x1c6014cf23ddc2edL;
 
    public static final short TYPE_DONE = (short) 0;
    public static final short TYPE_NODE = (short) 1;
    public static final short TYPE_FACTOR = (short) 2;
    public static final short SENSOR_UNKNOWN = (short) 0;
    public static final short SENSOR_ODO = (short) 1;
    public static final short SENSOR_SONAR = (short) 2;
    public static final short SENSOR_CAMERA = (short) 3;
    public static final short SENSOR_RPZ = (short) 4;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(se.save_isam_t.class))
            return 0L;
 
        classes.add(se.save_isam_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.timestamp); 
 
        outs.writeLong(this.id); 
 
        outs.writeInt(this.n); 
 
        __strbuf = new char[this.line.length()]; this.line.getChars(0, this.line.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeShort(this.type); 
 
        outs.writeShort(this.sensor); 
 
    }
 
    public save_isam_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public save_isam_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static se.save_isam_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        se.save_isam_t o = new se.save_isam_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.timestamp = ins.readLong();
 
        this.id = ins.readLong();
 
        this.n = ins.readInt();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.line = new String(__strbuf);
 
        this.type = ins.readShort();
 
        this.sensor = ins.readShort();
 
    }
 
    public se.save_isam_t copy()
    {
        se.save_isam_t outobj = new se.save_isam_t();
        outobj.timestamp = this.timestamp;
 
        outobj.id = this.id;
 
        outobj.n = this.n;
 
        outobj.line = this.line;
 
        outobj.type = this.type;
 
        outobj.sensor = this.sensor;
 
        return outobj;
    }
 
}

