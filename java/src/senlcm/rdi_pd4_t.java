/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package senlcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class rdi_pd4_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public byte system_config;
    public double btv[];
    public byte btv_status;
    public double wtv[];
    public byte wtv_status;
    public double wtv_layer_start;
    public double wtv_layer_end;
    public double range[];
    public double altitude;
    public byte tofp_hour;
    public byte tofp_minute;
    public byte tofp_second;
    public byte tofp_hundredth;
    public byte builtin_test[];
    public double speed_of_sound;
    public double xducer_head_temp;
 
    public rdi_pd4_t()
    {
        btv = new double[4];
        wtv = new double[4];
        range = new double[4];
        builtin_test = new byte[2];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xa3a5e0187342f43eL;
 
    public static final int SYSTEM_CONFIG_COORD_MASK = 192;
    public static final int SYSTEM_CONFIG_COORD_BEAM = 0;
    public static final int SYSTEM_CONFIG_COORD_INST = 64;
    public static final int SYSTEM_CONFIG_COORD_SHIP = 128;
    public static final int SYSTEM_CONFIG_COORD_EARTH = 192;
    public static final int SYSTEM_CONFIG_TILT_MASK = 32;
    public static final int SYSTEM_CONFIG_TILT_USED = 32;
    public static final int SYSTEM_CONFIG_3BEAM_MASK = 16;
    public static final int SYSTEM_CONFIG_3BEAM_USED = 16;
    public static final int SYSTEM_CONFIG_KHZ_MASK = 7;
    public static final int SYSTEM_CONFIG_KHZ_300 = 2;
    public static final int SYSTEM_CONFIG_KHZ_600 = 3;
    public static final int SYSTEM_CONFIG_KHZ_1200 = 4;
    public static final double BTV_SENTINAL = -32.768;
    public static final int BTV_STATUS_BEAM4_LOW_ECHO_AMPLITUDE = 128;
    public static final int BTV_STATUS_BEAM4_LOW_CORRELATION = 64;
    public static final int BTV_STATUS_BEAM3_LOW_ECHO_AMPLITUDE = 32;
    public static final int BTV_STATUS_BEAM3_LOW_CORRELATION = 16;
    public static final int BTV_STATUS_BEAM2_LOW_ECHO_AMPLITUDE = 8;
    public static final int BTV_STATUS_BEAM2_LOW_CORRELATION = 4;
    public static final int BTV_STATUS_BEAM1_LOW_ECHO_AMPLITUDE = 2;
    public static final int BTV_STATUS_BEAM1_LOW_CORRELATION = 1;
    public static final int BTV_STATUS_OK = 0;
    public static final double WTV_SENTINAL = -32.768;
    public static final int WTV_STATUS_ALTITUDE_TOO_SHALLOW = 16;
    public static final int WTV_STATUS_BEAM4_LOW_CORRELATION = 8;
    public static final int WTV_STATUS_BEAM3_LOW_CORRELATION = 4;
    public static final int WTV_STATUS_BEAM2_LOW_CORRELATION = 2;
    public static final int WTV_STATUS_BEAM1_LOW_CORRELATION = 1;
    public static final int WTV_STATUS_OK = 0;
    public static final double RANGE_SENTINAL = 0.0;
    public static final double ALTITUDE_SENTINAL = 0.0;
    public static final int BUILTIN_TEST_OK = 0;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(senlcm.rdi_pd4_t.class))
            return 0L;
 
        classes.add(senlcm.rdi_pd4_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeByte(this.system_config); 
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.btv[a]); 
        }
 
        outs.writeByte(this.btv_status); 
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.wtv[a]); 
        }
 
        outs.writeByte(this.wtv_status); 
 
        outs.writeDouble(this.wtv_layer_start); 
 
        outs.writeDouble(this.wtv_layer_end); 
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.range[a]); 
        }
 
        outs.writeDouble(this.altitude); 
 
        outs.writeByte(this.tofp_hour); 
 
        outs.writeByte(this.tofp_minute); 
 
        outs.writeByte(this.tofp_second); 
 
        outs.writeByte(this.tofp_hundredth); 
 
        outs.write(this.builtin_test, 0, 2);
 
        outs.writeDouble(this.speed_of_sound); 
 
        outs.writeDouble(this.xducer_head_temp); 
 
    }
 
    public rdi_pd4_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public rdi_pd4_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static senlcm.rdi_pd4_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        senlcm.rdi_pd4_t o = new senlcm.rdi_pd4_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.system_config = ins.readByte();
 
        this.btv = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.btv[a] = ins.readDouble();
        }
 
        this.btv_status = ins.readByte();
 
        this.wtv = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.wtv[a] = ins.readDouble();
        }
 
        this.wtv_status = ins.readByte();
 
        this.wtv_layer_start = ins.readDouble();
 
        this.wtv_layer_end = ins.readDouble();
 
        this.range = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.range[a] = ins.readDouble();
        }
 
        this.altitude = ins.readDouble();
 
        this.tofp_hour = ins.readByte();
 
        this.tofp_minute = ins.readByte();
 
        this.tofp_second = ins.readByte();
 
        this.tofp_hundredth = ins.readByte();
 
        this.builtin_test = new byte[(int) 2];
        ins.readFully(this.builtin_test, 0, 2); 
        this.speed_of_sound = ins.readDouble();
 
        this.xducer_head_temp = ins.readDouble();
 
    }
 
    public senlcm.rdi_pd4_t copy()
    {
        senlcm.rdi_pd4_t outobj = new senlcm.rdi_pd4_t();
        outobj.utime = this.utime;
 
        outobj.system_config = this.system_config;
 
        outobj.btv = new double[(int) 4];
        System.arraycopy(this.btv, 0, outobj.btv, 0, 4); 
        outobj.btv_status = this.btv_status;
 
        outobj.wtv = new double[(int) 4];
        System.arraycopy(this.wtv, 0, outobj.wtv, 0, 4); 
        outobj.wtv_status = this.wtv_status;
 
        outobj.wtv_layer_start = this.wtv_layer_start;
 
        outobj.wtv_layer_end = this.wtv_layer_end;
 
        outobj.range = new double[(int) 4];
        System.arraycopy(this.range, 0, outobj.range, 0, 4); 
        outobj.altitude = this.altitude;
 
        outobj.tofp_hour = this.tofp_hour;
 
        outobj.tofp_minute = this.tofp_minute;
 
        outobj.tofp_second = this.tofp_second;
 
        outobj.tofp_hundredth = this.tofp_hundredth;
 
        outobj.builtin_test = new byte[(int) 2];
        System.arraycopy(this.builtin_test, 0, outobj.builtin_test, 0, 2); 
        outobj.speed_of_sound = this.speed_of_sound;
 
        outobj.xducer_head_temp = this.xducer_head_temp;
 
        return outobj;
    }
 
}

