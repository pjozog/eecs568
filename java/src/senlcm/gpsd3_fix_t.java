/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package senlcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class gpsd3_fix_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public short mode;
    public double ept;
    public double latitude;
    public double epy;
    public double longitude;
    public double epx;
    public double altitude;
    public double epv;
    public double track;
    public double epd;
    public double speed;
    public double eps;
    public double climb;
    public double epc;
 
    public gpsd3_fix_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x8f9c76cfb80b1617L;
 
    public static final byte MODE_NOT_SEEN = (byte) 0;
    public static final byte MODE_NO_FIX = (byte) 1;
    public static final byte MODE_2D = (byte) 2;
    public static final byte MODE_3D = (byte) 3;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(senlcm.gpsd3_fix_t.class))
            return 0L;
 
        classes.add(senlcm.gpsd3_fix_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeShort(this.mode); 
 
        outs.writeDouble(this.ept); 
 
        outs.writeDouble(this.latitude); 
 
        outs.writeDouble(this.epy); 
 
        outs.writeDouble(this.longitude); 
 
        outs.writeDouble(this.epx); 
 
        outs.writeDouble(this.altitude); 
 
        outs.writeDouble(this.epv); 
 
        outs.writeDouble(this.track); 
 
        outs.writeDouble(this.epd); 
 
        outs.writeDouble(this.speed); 
 
        outs.writeDouble(this.eps); 
 
        outs.writeDouble(this.climb); 
 
        outs.writeDouble(this.epc); 
 
    }
 
    public gpsd3_fix_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public gpsd3_fix_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static senlcm.gpsd3_fix_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        senlcm.gpsd3_fix_t o = new senlcm.gpsd3_fix_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.mode = ins.readShort();
 
        this.ept = ins.readDouble();
 
        this.latitude = ins.readDouble();
 
        this.epy = ins.readDouble();
 
        this.longitude = ins.readDouble();
 
        this.epx = ins.readDouble();
 
        this.altitude = ins.readDouble();
 
        this.epv = ins.readDouble();
 
        this.track = ins.readDouble();
 
        this.epd = ins.readDouble();
 
        this.speed = ins.readDouble();
 
        this.eps = ins.readDouble();
 
        this.climb = ins.readDouble();
 
        this.epc = ins.readDouble();
 
    }
 
    public senlcm.gpsd3_fix_t copy()
    {
        senlcm.gpsd3_fix_t outobj = new senlcm.gpsd3_fix_t();
        outobj.utime = this.utime;
 
        outobj.mode = this.mode;
 
        outobj.ept = this.ept;
 
        outobj.latitude = this.latitude;
 
        outobj.epy = this.epy;
 
        outobj.longitude = this.longitude;
 
        outobj.epx = this.epx;
 
        outobj.altitude = this.altitude;
 
        outobj.epv = this.epv;
 
        outobj.track = this.track;
 
        outobj.epd = this.epd;
 
        outobj.speed = this.speed;
 
        outobj.eps = this.eps;
 
        outobj.climb = this.climb;
 
        outobj.epc = this.epc;
 
        return outobj;
    }
 
}

