/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package hauv;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class didson_t implements lcm.lcm.LCMEncodable
{
    public int m_nFrameNumber;
    public long m_tFrameTime;
    public int m_nVersion;
    public int m_nStatus;
    public int m_nYear;
    public int m_nMonth;
    public int m_nDay;
    public int m_nHour;
    public int m_nMinute;
    public int m_nSecond;
    public int m_nHSecond;
    public int m_nTransmitMode;
    public int m_nWindowStart;
    public int m_nWindowLength;
    public int m_nThreshold;
    public int m_nIntensity;
    public int m_nReceiverGain;
    public int m_nDegC;
    public int m_nDegC2;
    public int m_nHumidity;
    public int m_nFocus;
    public int m_nBattery;
    public float m_fUserValue1;
    public float m_fUserValue2;
    public float m_fUserValue3;
    public float m_fUserValue4;
    public float m_fUserValue5;
    public float m_fUserValue6;
    public float m_fUserValue7;
    public float m_fUserValue8;
    public float m_fVelocity;
    public float m_fDepth;
    public float m_fAltitude;
    public float m_fPitch;
    public float m_fPitchRate;
    public float m_fRoll;
    public float m_fRollRate;
    public float m_fHeading;
    public float m_fHeadingRate;
    public float m_fCompassHeading;
    public float m_fCompassPitch;
    public float m_fCompassRoll;
    public double m_dLatitude;
    public double m_dLongitude;
    public float m_fSonarPosition;
    public int m_nConfigFlags;
    public int m_nPrismTilt;
    public float m_fTargetRange;
    public float m_fTargetBearing;
    public boolean m_bTargetPresent;
    public int m_nFirmwareRevision;
    public int m_nFlags;
    public int m_nSourceFrame;
    public float m_fWaterTemp;
    public int m_nTimerPeriod;
    public float m_fSonarX;
    public float m_fSonarY;
    public float m_fSonarZ;
    public float m_fSonarPan;
    public float m_fSonarTilt;
    public float m_fSonarRoll;
    public float m_fPanPNNL;
    public float m_fTiltPNNL;
    public float m_fRollPNNL;
    public double m_dVehicleTime;
    public float m_fTimeGGK;
    public int m_nDateGGK;
    public int m_nQualityGGK;
    public int m_nNumSatsGGK;
    public float m_fDOPGGK;
    public float m_fEHTGGK;
    public float m_fHeaveTSS;
    public int m_nYearGPS;
    public int m_nMonthGPS;
    public int m_nDayGPS;
    public int m_nHourGPS;
    public int m_nMinuteGPS;
    public int m_nSecondGPS;
    public int m_nHSecondGPS;
    public float m_fSonarPanOffset;
    public float m_fSonarTiltOffset;
    public float m_fSonarRollOffset;
    public float m_fSonarXOffset;
    public float m_fSonarYOffset;
    public float m_fSonarZOffset;
    public float m_fTMatrix[];
    public byte m_cRsvdData[];
    public byte m_cData[];
    public long time_first_packet;
 
    public didson_t()
    {
        m_fTMatrix = new float[16];
        m_cRsvdData = new byte[604];
        m_cData = new byte[49152];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x8c1bccefe738a4c3L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(hauv.didson_t.class))
            return 0L;
 
        classes.add(hauv.didson_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.m_nFrameNumber); 
 
        outs.writeLong(this.m_tFrameTime); 
 
        outs.writeInt(this.m_nVersion); 
 
        outs.writeInt(this.m_nStatus); 
 
        outs.writeInt(this.m_nYear); 
 
        outs.writeInt(this.m_nMonth); 
 
        outs.writeInt(this.m_nDay); 
 
        outs.writeInt(this.m_nHour); 
 
        outs.writeInt(this.m_nMinute); 
 
        outs.writeInt(this.m_nSecond); 
 
        outs.writeInt(this.m_nHSecond); 
 
        outs.writeInt(this.m_nTransmitMode); 
 
        outs.writeInt(this.m_nWindowStart); 
 
        outs.writeInt(this.m_nWindowLength); 
 
        outs.writeInt(this.m_nThreshold); 
 
        outs.writeInt(this.m_nIntensity); 
 
        outs.writeInt(this.m_nReceiverGain); 
 
        outs.writeInt(this.m_nDegC); 
 
        outs.writeInt(this.m_nDegC2); 
 
        outs.writeInt(this.m_nHumidity); 
 
        outs.writeInt(this.m_nFocus); 
 
        outs.writeInt(this.m_nBattery); 
 
        outs.writeFloat(this.m_fUserValue1); 
 
        outs.writeFloat(this.m_fUserValue2); 
 
        outs.writeFloat(this.m_fUserValue3); 
 
        outs.writeFloat(this.m_fUserValue4); 
 
        outs.writeFloat(this.m_fUserValue5); 
 
        outs.writeFloat(this.m_fUserValue6); 
 
        outs.writeFloat(this.m_fUserValue7); 
 
        outs.writeFloat(this.m_fUserValue8); 
 
        outs.writeFloat(this.m_fVelocity); 
 
        outs.writeFloat(this.m_fDepth); 
 
        outs.writeFloat(this.m_fAltitude); 
 
        outs.writeFloat(this.m_fPitch); 
 
        outs.writeFloat(this.m_fPitchRate); 
 
        outs.writeFloat(this.m_fRoll); 
 
        outs.writeFloat(this.m_fRollRate); 
 
        outs.writeFloat(this.m_fHeading); 
 
        outs.writeFloat(this.m_fHeadingRate); 
 
        outs.writeFloat(this.m_fCompassHeading); 
 
        outs.writeFloat(this.m_fCompassPitch); 
 
        outs.writeFloat(this.m_fCompassRoll); 
 
        outs.writeDouble(this.m_dLatitude); 
 
        outs.writeDouble(this.m_dLongitude); 
 
        outs.writeFloat(this.m_fSonarPosition); 
 
        outs.writeInt(this.m_nConfigFlags); 
 
        outs.writeInt(this.m_nPrismTilt); 
 
        outs.writeFloat(this.m_fTargetRange); 
 
        outs.writeFloat(this.m_fTargetBearing); 
 
        outs.writeByte( this.m_bTargetPresent ? 1 : 0); 
 
        outs.writeInt(this.m_nFirmwareRevision); 
 
        outs.writeInt(this.m_nFlags); 
 
        outs.writeInt(this.m_nSourceFrame); 
 
        outs.writeFloat(this.m_fWaterTemp); 
 
        outs.writeInt(this.m_nTimerPeriod); 
 
        outs.writeFloat(this.m_fSonarX); 
 
        outs.writeFloat(this.m_fSonarY); 
 
        outs.writeFloat(this.m_fSonarZ); 
 
        outs.writeFloat(this.m_fSonarPan); 
 
        outs.writeFloat(this.m_fSonarTilt); 
 
        outs.writeFloat(this.m_fSonarRoll); 
 
        outs.writeFloat(this.m_fPanPNNL); 
 
        outs.writeFloat(this.m_fTiltPNNL); 
 
        outs.writeFloat(this.m_fRollPNNL); 
 
        outs.writeDouble(this.m_dVehicleTime); 
 
        outs.writeFloat(this.m_fTimeGGK); 
 
        outs.writeInt(this.m_nDateGGK); 
 
        outs.writeInt(this.m_nQualityGGK); 
 
        outs.writeInt(this.m_nNumSatsGGK); 
 
        outs.writeFloat(this.m_fDOPGGK); 
 
        outs.writeFloat(this.m_fEHTGGK); 
 
        outs.writeFloat(this.m_fHeaveTSS); 
 
        outs.writeInt(this.m_nYearGPS); 
 
        outs.writeInt(this.m_nMonthGPS); 
 
        outs.writeInt(this.m_nDayGPS); 
 
        outs.writeInt(this.m_nHourGPS); 
 
        outs.writeInt(this.m_nMinuteGPS); 
 
        outs.writeInt(this.m_nSecondGPS); 
 
        outs.writeInt(this.m_nHSecondGPS); 
 
        outs.writeFloat(this.m_fSonarPanOffset); 
 
        outs.writeFloat(this.m_fSonarTiltOffset); 
 
        outs.writeFloat(this.m_fSonarRollOffset); 
 
        outs.writeFloat(this.m_fSonarXOffset); 
 
        outs.writeFloat(this.m_fSonarYOffset); 
 
        outs.writeFloat(this.m_fSonarZOffset); 
 
        for (int a = 0; a < 16; a++) {
            outs.writeFloat(this.m_fTMatrix[a]); 
        }
 
        outs.write(this.m_cRsvdData, 0, 604);
 
        outs.write(this.m_cData, 0, 49152);
 
        outs.writeLong(this.time_first_packet); 
 
    }
 
    public didson_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public didson_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static hauv.didson_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        hauv.didson_t o = new hauv.didson_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.m_nFrameNumber = ins.readInt();
 
        this.m_tFrameTime = ins.readLong();
 
        this.m_nVersion = ins.readInt();
 
        this.m_nStatus = ins.readInt();
 
        this.m_nYear = ins.readInt();
 
        this.m_nMonth = ins.readInt();
 
        this.m_nDay = ins.readInt();
 
        this.m_nHour = ins.readInt();
 
        this.m_nMinute = ins.readInt();
 
        this.m_nSecond = ins.readInt();
 
        this.m_nHSecond = ins.readInt();
 
        this.m_nTransmitMode = ins.readInt();
 
        this.m_nWindowStart = ins.readInt();
 
        this.m_nWindowLength = ins.readInt();
 
        this.m_nThreshold = ins.readInt();
 
        this.m_nIntensity = ins.readInt();
 
        this.m_nReceiverGain = ins.readInt();
 
        this.m_nDegC = ins.readInt();
 
        this.m_nDegC2 = ins.readInt();
 
        this.m_nHumidity = ins.readInt();
 
        this.m_nFocus = ins.readInt();
 
        this.m_nBattery = ins.readInt();
 
        this.m_fUserValue1 = ins.readFloat();
 
        this.m_fUserValue2 = ins.readFloat();
 
        this.m_fUserValue3 = ins.readFloat();
 
        this.m_fUserValue4 = ins.readFloat();
 
        this.m_fUserValue5 = ins.readFloat();
 
        this.m_fUserValue6 = ins.readFloat();
 
        this.m_fUserValue7 = ins.readFloat();
 
        this.m_fUserValue8 = ins.readFloat();
 
        this.m_fVelocity = ins.readFloat();
 
        this.m_fDepth = ins.readFloat();
 
        this.m_fAltitude = ins.readFloat();
 
        this.m_fPitch = ins.readFloat();
 
        this.m_fPitchRate = ins.readFloat();
 
        this.m_fRoll = ins.readFloat();
 
        this.m_fRollRate = ins.readFloat();
 
        this.m_fHeading = ins.readFloat();
 
        this.m_fHeadingRate = ins.readFloat();
 
        this.m_fCompassHeading = ins.readFloat();
 
        this.m_fCompassPitch = ins.readFloat();
 
        this.m_fCompassRoll = ins.readFloat();
 
        this.m_dLatitude = ins.readDouble();
 
        this.m_dLongitude = ins.readDouble();
 
        this.m_fSonarPosition = ins.readFloat();
 
        this.m_nConfigFlags = ins.readInt();
 
        this.m_nPrismTilt = ins.readInt();
 
        this.m_fTargetRange = ins.readFloat();
 
        this.m_fTargetBearing = ins.readFloat();
 
        this.m_bTargetPresent = ins.readByte()!=0;
 
        this.m_nFirmwareRevision = ins.readInt();
 
        this.m_nFlags = ins.readInt();
 
        this.m_nSourceFrame = ins.readInt();
 
        this.m_fWaterTemp = ins.readFloat();
 
        this.m_nTimerPeriod = ins.readInt();
 
        this.m_fSonarX = ins.readFloat();
 
        this.m_fSonarY = ins.readFloat();
 
        this.m_fSonarZ = ins.readFloat();
 
        this.m_fSonarPan = ins.readFloat();
 
        this.m_fSonarTilt = ins.readFloat();
 
        this.m_fSonarRoll = ins.readFloat();
 
        this.m_fPanPNNL = ins.readFloat();
 
        this.m_fTiltPNNL = ins.readFloat();
 
        this.m_fRollPNNL = ins.readFloat();
 
        this.m_dVehicleTime = ins.readDouble();
 
        this.m_fTimeGGK = ins.readFloat();
 
        this.m_nDateGGK = ins.readInt();
 
        this.m_nQualityGGK = ins.readInt();
 
        this.m_nNumSatsGGK = ins.readInt();
 
        this.m_fDOPGGK = ins.readFloat();
 
        this.m_fEHTGGK = ins.readFloat();
 
        this.m_fHeaveTSS = ins.readFloat();
 
        this.m_nYearGPS = ins.readInt();
 
        this.m_nMonthGPS = ins.readInt();
 
        this.m_nDayGPS = ins.readInt();
 
        this.m_nHourGPS = ins.readInt();
 
        this.m_nMinuteGPS = ins.readInt();
 
        this.m_nSecondGPS = ins.readInt();
 
        this.m_nHSecondGPS = ins.readInt();
 
        this.m_fSonarPanOffset = ins.readFloat();
 
        this.m_fSonarTiltOffset = ins.readFloat();
 
        this.m_fSonarRollOffset = ins.readFloat();
 
        this.m_fSonarXOffset = ins.readFloat();
 
        this.m_fSonarYOffset = ins.readFloat();
 
        this.m_fSonarZOffset = ins.readFloat();
 
        this.m_fTMatrix = new float[(int) 16];
        for (int a = 0; a < 16; a++) {
            this.m_fTMatrix[a] = ins.readFloat();
        }
 
        this.m_cRsvdData = new byte[(int) 604];
        ins.readFully(this.m_cRsvdData, 0, 604); 
        this.m_cData = new byte[(int) 49152];
        ins.readFully(this.m_cData, 0, 49152); 
        this.time_first_packet = ins.readLong();
 
    }
 
    public hauv.didson_t copy()
    {
        hauv.didson_t outobj = new hauv.didson_t();
        outobj.m_nFrameNumber = this.m_nFrameNumber;
 
        outobj.m_tFrameTime = this.m_tFrameTime;
 
        outobj.m_nVersion = this.m_nVersion;
 
        outobj.m_nStatus = this.m_nStatus;
 
        outobj.m_nYear = this.m_nYear;
 
        outobj.m_nMonth = this.m_nMonth;
 
        outobj.m_nDay = this.m_nDay;
 
        outobj.m_nHour = this.m_nHour;
 
        outobj.m_nMinute = this.m_nMinute;
 
        outobj.m_nSecond = this.m_nSecond;
 
        outobj.m_nHSecond = this.m_nHSecond;
 
        outobj.m_nTransmitMode = this.m_nTransmitMode;
 
        outobj.m_nWindowStart = this.m_nWindowStart;
 
        outobj.m_nWindowLength = this.m_nWindowLength;
 
        outobj.m_nThreshold = this.m_nThreshold;
 
        outobj.m_nIntensity = this.m_nIntensity;
 
        outobj.m_nReceiverGain = this.m_nReceiverGain;
 
        outobj.m_nDegC = this.m_nDegC;
 
        outobj.m_nDegC2 = this.m_nDegC2;
 
        outobj.m_nHumidity = this.m_nHumidity;
 
        outobj.m_nFocus = this.m_nFocus;
 
        outobj.m_nBattery = this.m_nBattery;
 
        outobj.m_fUserValue1 = this.m_fUserValue1;
 
        outobj.m_fUserValue2 = this.m_fUserValue2;
 
        outobj.m_fUserValue3 = this.m_fUserValue3;
 
        outobj.m_fUserValue4 = this.m_fUserValue4;
 
        outobj.m_fUserValue5 = this.m_fUserValue5;
 
        outobj.m_fUserValue6 = this.m_fUserValue6;
 
        outobj.m_fUserValue7 = this.m_fUserValue7;
 
        outobj.m_fUserValue8 = this.m_fUserValue8;
 
        outobj.m_fVelocity = this.m_fVelocity;
 
        outobj.m_fDepth = this.m_fDepth;
 
        outobj.m_fAltitude = this.m_fAltitude;
 
        outobj.m_fPitch = this.m_fPitch;
 
        outobj.m_fPitchRate = this.m_fPitchRate;
 
        outobj.m_fRoll = this.m_fRoll;
 
        outobj.m_fRollRate = this.m_fRollRate;
 
        outobj.m_fHeading = this.m_fHeading;
 
        outobj.m_fHeadingRate = this.m_fHeadingRate;
 
        outobj.m_fCompassHeading = this.m_fCompassHeading;
 
        outobj.m_fCompassPitch = this.m_fCompassPitch;
 
        outobj.m_fCompassRoll = this.m_fCompassRoll;
 
        outobj.m_dLatitude = this.m_dLatitude;
 
        outobj.m_dLongitude = this.m_dLongitude;
 
        outobj.m_fSonarPosition = this.m_fSonarPosition;
 
        outobj.m_nConfigFlags = this.m_nConfigFlags;
 
        outobj.m_nPrismTilt = this.m_nPrismTilt;
 
        outobj.m_fTargetRange = this.m_fTargetRange;
 
        outobj.m_fTargetBearing = this.m_fTargetBearing;
 
        outobj.m_bTargetPresent = this.m_bTargetPresent;
 
        outobj.m_nFirmwareRevision = this.m_nFirmwareRevision;
 
        outobj.m_nFlags = this.m_nFlags;
 
        outobj.m_nSourceFrame = this.m_nSourceFrame;
 
        outobj.m_fWaterTemp = this.m_fWaterTemp;
 
        outobj.m_nTimerPeriod = this.m_nTimerPeriod;
 
        outobj.m_fSonarX = this.m_fSonarX;
 
        outobj.m_fSonarY = this.m_fSonarY;
 
        outobj.m_fSonarZ = this.m_fSonarZ;
 
        outobj.m_fSonarPan = this.m_fSonarPan;
 
        outobj.m_fSonarTilt = this.m_fSonarTilt;
 
        outobj.m_fSonarRoll = this.m_fSonarRoll;
 
        outobj.m_fPanPNNL = this.m_fPanPNNL;
 
        outobj.m_fTiltPNNL = this.m_fTiltPNNL;
 
        outobj.m_fRollPNNL = this.m_fRollPNNL;
 
        outobj.m_dVehicleTime = this.m_dVehicleTime;
 
        outobj.m_fTimeGGK = this.m_fTimeGGK;
 
        outobj.m_nDateGGK = this.m_nDateGGK;
 
        outobj.m_nQualityGGK = this.m_nQualityGGK;
 
        outobj.m_nNumSatsGGK = this.m_nNumSatsGGK;
 
        outobj.m_fDOPGGK = this.m_fDOPGGK;
 
        outobj.m_fEHTGGK = this.m_fEHTGGK;
 
        outobj.m_fHeaveTSS = this.m_fHeaveTSS;
 
        outobj.m_nYearGPS = this.m_nYearGPS;
 
        outobj.m_nMonthGPS = this.m_nMonthGPS;
 
        outobj.m_nDayGPS = this.m_nDayGPS;
 
        outobj.m_nHourGPS = this.m_nHourGPS;
 
        outobj.m_nMinuteGPS = this.m_nMinuteGPS;
 
        outobj.m_nSecondGPS = this.m_nSecondGPS;
 
        outobj.m_nHSecondGPS = this.m_nHSecondGPS;
 
        outobj.m_fSonarPanOffset = this.m_fSonarPanOffset;
 
        outobj.m_fSonarTiltOffset = this.m_fSonarTiltOffset;
 
        outobj.m_fSonarRollOffset = this.m_fSonarRollOffset;
 
        outobj.m_fSonarXOffset = this.m_fSonarXOffset;
 
        outobj.m_fSonarYOffset = this.m_fSonarYOffset;
 
        outobj.m_fSonarZOffset = this.m_fSonarZOffset;
 
        outobj.m_fTMatrix = new float[(int) 16];
        System.arraycopy(this.m_fTMatrix, 0, outobj.m_fTMatrix, 0, 16); 
        outobj.m_cRsvdData = new byte[(int) 604];
        System.arraycopy(this.m_cRsvdData, 0, outobj.m_cRsvdData, 0, 604); 
        outobj.m_cData = new byte[(int) 49152];
        System.arraycopy(this.m_cData, 0, outobj.m_cData, 0, 49152); 
        outobj.time_first_packet = this.time_first_packet;
 
        return outobj;
    }
 
}

