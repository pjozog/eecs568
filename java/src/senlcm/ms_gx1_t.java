/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package senlcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class ms_gx1_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public long bitmask;
    public double sMagField[];
    public double sAccel[];
    public double sAngRate[];
    public double sEuler[];
    public double sM[][];
    public double sQ[];
    public double iMagField[];
    public double iAccel[];
    public double iAngRate[];
    public double iEuler[];
    public double iM[][];
    public double iQ[];
    public double Temperature;
    public short TimerTicks;
    public short MagGainScale;
    public short AccelGainScale;
    public short GyroGainScale;
 
    public ms_gx1_t()
    {
        sMagField = new double[3];
        sAccel = new double[3];
        sAngRate = new double[3];
        sEuler = new double[3];
        sM = new double[3][3];
        sQ = new double[4];
        iMagField = new double[3];
        iAccel = new double[3];
        iAngRate = new double[3];
        iEuler = new double[3];
        iM = new double[3][3];
        iQ = new double[4];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xf2d3986782261f29L;
 
    public static final short INST_MAGFIELD = (short) 1;
    public static final short INST_ACCEL = (short) 2;
    public static final short INST_ANGRATE = (short) 4;
    public static final short INST_EULER = (short) 8;
    public static final short INST_M = (short) 16;
    public static final short INST_Q = (short) 32;
    public static final short STAB_MAGFIELD = (short) 64;
    public static final short STAB_ACCEL = (short) 128;
    public static final short STAB_ANGRATE = (short) 256;
    public static final short STAB_EULER = (short) 512;
    public static final short STAB_M = (short) 1024;
    public static final short STAB_Q = (short) 2048;
    public static final short TEMPERATURE = (short) 4096;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(senlcm.ms_gx1_t.class))
            return 0L;
 
        classes.add(senlcm.ms_gx1_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeLong(this.bitmask); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.sMagField[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.sAccel[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.sAngRate[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.sEuler[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < 3; b++) {
                outs.writeDouble(this.sM[a][b]); 
            }
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.sQ[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.iMagField[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.iAccel[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.iAngRate[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.iEuler[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < 3; b++) {
                outs.writeDouble(this.iM[a][b]); 
            }
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.iQ[a]); 
        }
 
        outs.writeDouble(this.Temperature); 
 
        outs.writeShort(this.TimerTicks); 
 
        outs.writeShort(this.MagGainScale); 
 
        outs.writeShort(this.AccelGainScale); 
 
        outs.writeShort(this.GyroGainScale); 
 
    }
 
    public ms_gx1_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public ms_gx1_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static senlcm.ms_gx1_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        senlcm.ms_gx1_t o = new senlcm.ms_gx1_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.bitmask = ins.readLong();
 
        this.sMagField = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.sMagField[a] = ins.readDouble();
        }
 
        this.sAccel = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.sAccel[a] = ins.readDouble();
        }
 
        this.sAngRate = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.sAngRate[a] = ins.readDouble();
        }
 
        this.sEuler = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.sEuler[a] = ins.readDouble();
        }
 
        this.sM = new double[(int) 3][(int) 3];
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < 3; b++) {
                this.sM[a][b] = ins.readDouble();
            }
        }
 
        this.sQ = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.sQ[a] = ins.readDouble();
        }
 
        this.iMagField = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.iMagField[a] = ins.readDouble();
        }
 
        this.iAccel = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.iAccel[a] = ins.readDouble();
        }
 
        this.iAngRate = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.iAngRate[a] = ins.readDouble();
        }
 
        this.iEuler = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.iEuler[a] = ins.readDouble();
        }
 
        this.iM = new double[(int) 3][(int) 3];
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < 3; b++) {
                this.iM[a][b] = ins.readDouble();
            }
        }
 
        this.iQ = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.iQ[a] = ins.readDouble();
        }
 
        this.Temperature = ins.readDouble();
 
        this.TimerTicks = ins.readShort();
 
        this.MagGainScale = ins.readShort();
 
        this.AccelGainScale = ins.readShort();
 
        this.GyroGainScale = ins.readShort();
 
    }
 
    public senlcm.ms_gx1_t copy()
    {
        senlcm.ms_gx1_t outobj = new senlcm.ms_gx1_t();
        outobj.utime = this.utime;
 
        outobj.bitmask = this.bitmask;
 
        outobj.sMagField = new double[(int) 3];
        System.arraycopy(this.sMagField, 0, outobj.sMagField, 0, 3); 
        outobj.sAccel = new double[(int) 3];
        System.arraycopy(this.sAccel, 0, outobj.sAccel, 0, 3); 
        outobj.sAngRate = new double[(int) 3];
        System.arraycopy(this.sAngRate, 0, outobj.sAngRate, 0, 3); 
        outobj.sEuler = new double[(int) 3];
        System.arraycopy(this.sEuler, 0, outobj.sEuler, 0, 3); 
        outobj.sM = new double[(int) 3][(int) 3];
        for (int a = 0; a < 3; a++) {
            System.arraycopy(this.sM[a], 0, outobj.sM[a], 0, 3);        }
 
        outobj.sQ = new double[(int) 4];
        System.arraycopy(this.sQ, 0, outobj.sQ, 0, 4); 
        outobj.iMagField = new double[(int) 3];
        System.arraycopy(this.iMagField, 0, outobj.iMagField, 0, 3); 
        outobj.iAccel = new double[(int) 3];
        System.arraycopy(this.iAccel, 0, outobj.iAccel, 0, 3); 
        outobj.iAngRate = new double[(int) 3];
        System.arraycopy(this.iAngRate, 0, outobj.iAngRate, 0, 3); 
        outobj.iEuler = new double[(int) 3];
        System.arraycopy(this.iEuler, 0, outobj.iEuler, 0, 3); 
        outobj.iM = new double[(int) 3][(int) 3];
        for (int a = 0; a < 3; a++) {
            System.arraycopy(this.iM[a], 0, outobj.iM[a], 0, 3);        }
 
        outobj.iQ = new double[(int) 4];
        System.arraycopy(this.iQ, 0, outobj.iQ, 0, 4); 
        outobj.Temperature = this.Temperature;
 
        outobj.TimerTicks = this.TimerTicks;
 
        outobj.MagGainScale = this.MagGainScale;
 
        outobj.AccelGainScale = this.AccelGainScale;
 
        outobj.GyroGainScale = this.GyroGainScale;
 
        return outobj;
    }
 
}

