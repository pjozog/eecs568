/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package perllcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class est_navigator_index_t implements lcm.lcm.LCMEncodable
{
    public int proc_state_len;
    public int u_len;
    public int x;
    public int y;
    public int z;
    public int r;
    public int p;
    public int h;
    public int u;
    public int v;
    public int w;
    public int a;
    public int b;
    public int c;
    public int x_dot;
    public int y_dot;
    public int z_dot;
    public int r_dot;
    public int p_dot;
    public int h_dot;
 
    public est_navigator_index_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x59d898af5747b359L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(perllcm.est_navigator_index_t.class))
            return 0L;
 
        classes.add(perllcm.est_navigator_index_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.proc_state_len); 
 
        outs.writeInt(this.u_len); 
 
        outs.writeInt(this.x); 
 
        outs.writeInt(this.y); 
 
        outs.writeInt(this.z); 
 
        outs.writeInt(this.r); 
 
        outs.writeInt(this.p); 
 
        outs.writeInt(this.h); 
 
        outs.writeInt(this.u); 
 
        outs.writeInt(this.v); 
 
        outs.writeInt(this.w); 
 
        outs.writeInt(this.a); 
 
        outs.writeInt(this.b); 
 
        outs.writeInt(this.c); 
 
        outs.writeInt(this.x_dot); 
 
        outs.writeInt(this.y_dot); 
 
        outs.writeInt(this.z_dot); 
 
        outs.writeInt(this.r_dot); 
 
        outs.writeInt(this.p_dot); 
 
        outs.writeInt(this.h_dot); 
 
    }
 
    public est_navigator_index_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public est_navigator_index_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static perllcm.est_navigator_index_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        perllcm.est_navigator_index_t o = new perllcm.est_navigator_index_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.proc_state_len = ins.readInt();
 
        this.u_len = ins.readInt();
 
        this.x = ins.readInt();
 
        this.y = ins.readInt();
 
        this.z = ins.readInt();
 
        this.r = ins.readInt();
 
        this.p = ins.readInt();
 
        this.h = ins.readInt();
 
        this.u = ins.readInt();
 
        this.v = ins.readInt();
 
        this.w = ins.readInt();
 
        this.a = ins.readInt();
 
        this.b = ins.readInt();
 
        this.c = ins.readInt();
 
        this.x_dot = ins.readInt();
 
        this.y_dot = ins.readInt();
 
        this.z_dot = ins.readInt();
 
        this.r_dot = ins.readInt();
 
        this.p_dot = ins.readInt();
 
        this.h_dot = ins.readInt();
 
    }
 
    public perllcm.est_navigator_index_t copy()
    {
        perllcm.est_navigator_index_t outobj = new perllcm.est_navigator_index_t();
        outobj.proc_state_len = this.proc_state_len;
 
        outobj.u_len = this.u_len;
 
        outobj.x = this.x;
 
        outobj.y = this.y;
 
        outobj.z = this.z;
 
        outobj.r = this.r;
 
        outobj.p = this.p;
 
        outobj.h = this.h;
 
        outobj.u = this.u;
 
        outobj.v = this.v;
 
        outobj.w = this.w;
 
        outobj.a = this.a;
 
        outobj.b = this.b;
 
        outobj.c = this.c;
 
        outobj.x_dot = this.x_dot;
 
        outobj.y_dot = this.y_dot;
 
        outobj.z_dot = this.z_dot;
 
        outobj.r_dot = this.r_dot;
 
        outobj.p_dot = this.p_dot;
 
        outobj.h_dot = this.h_dot;
 
        return outobj;
    }
 
}

