/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package senlcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class gpsd3_dop_t implements lcm.lcm.LCMEncodable
{
    public double xdop;
    public double ydop;
    public double pdop;
    public double hdop;
    public double vdop;
    public double tdop;
    public double gdop;
 
    public gpsd3_dop_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x6172e29c8a5420c3L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(senlcm.gpsd3_dop_t.class))
            return 0L;
 
        classes.add(senlcm.gpsd3_dop_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeDouble(this.xdop); 
 
        outs.writeDouble(this.ydop); 
 
        outs.writeDouble(this.pdop); 
 
        outs.writeDouble(this.hdop); 
 
        outs.writeDouble(this.vdop); 
 
        outs.writeDouble(this.tdop); 
 
        outs.writeDouble(this.gdop); 
 
    }
 
    public gpsd3_dop_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public gpsd3_dop_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static senlcm.gpsd3_dop_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        senlcm.gpsd3_dop_t o = new senlcm.gpsd3_dop_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.xdop = ins.readDouble();
 
        this.ydop = ins.readDouble();
 
        this.pdop = ins.readDouble();
 
        this.hdop = ins.readDouble();
 
        this.vdop = ins.readDouble();
 
        this.tdop = ins.readDouble();
 
        this.gdop = ins.readDouble();
 
    }
 
    public senlcm.gpsd3_dop_t copy()
    {
        senlcm.gpsd3_dop_t outobj = new senlcm.gpsd3_dop_t();
        outobj.xdop = this.xdop;
 
        outobj.ydop = this.ydop;
 
        outobj.pdop = this.pdop;
 
        outobj.hdop = this.hdop;
 
        outobj.vdop = this.vdop;
 
        outobj.tdop = this.tdop;
 
        outobj.gdop = this.gdop;
 
        return outobj;
    }
 
}

