/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package hauv;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class bs_dvl_t implements lcm.lcm.LCMEncodable
{
    public long time_received;
    public long time;
    public double x_velocity;
    public double y_velocity;
    public double z_velocity;
    public double range1;
    public double range2;
    public double range3;
    public double range4;
    public double temperature;
    public long time_measured;
 
    public bs_dvl_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x2bf97428ee8ec50fL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(hauv.bs_dvl_t.class))
            return 0L;
 
        classes.add(hauv.bs_dvl_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.time_received); 
 
        outs.writeLong(this.time); 
 
        outs.writeDouble(this.x_velocity); 
 
        outs.writeDouble(this.y_velocity); 
 
        outs.writeDouble(this.z_velocity); 
 
        outs.writeDouble(this.range1); 
 
        outs.writeDouble(this.range2); 
 
        outs.writeDouble(this.range3); 
 
        outs.writeDouble(this.range4); 
 
        outs.writeDouble(this.temperature); 
 
        outs.writeLong(this.time_measured); 
 
    }
 
    public bs_dvl_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public bs_dvl_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static hauv.bs_dvl_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        hauv.bs_dvl_t o = new hauv.bs_dvl_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.time_received = ins.readLong();
 
        this.time = ins.readLong();
 
        this.x_velocity = ins.readDouble();
 
        this.y_velocity = ins.readDouble();
 
        this.z_velocity = ins.readDouble();
 
        this.range1 = ins.readDouble();
 
        this.range2 = ins.readDouble();
 
        this.range3 = ins.readDouble();
 
        this.range4 = ins.readDouble();
 
        this.temperature = ins.readDouble();
 
        this.time_measured = ins.readLong();
 
    }
 
    public hauv.bs_dvl_t copy()
    {
        hauv.bs_dvl_t outobj = new hauv.bs_dvl_t();
        outobj.time_received = this.time_received;
 
        outobj.time = this.time;
 
        outobj.x_velocity = this.x_velocity;
 
        outobj.y_velocity = this.y_velocity;
 
        outobj.z_velocity = this.z_velocity;
 
        outobj.range1 = this.range1;
 
        outobj.range2 = this.range2;
 
        outobj.range3 = this.range3;
 
        outobj.range4 = this.range4;
 
        outobj.temperature = this.temperature;
 
        outobj.time_measured = this.time_measured;
 
        return outobj;
    }
 
}

