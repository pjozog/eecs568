/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package perllcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class van_corrset_t implements lcm.lcm.LCMEncodable
{
    public long utime_i;
    public long utime_j;
    public double z[];
    public double R[];
    public int npts;
    public float u1[];
    public float v1[];
    public float u2[];
    public float v2[];
 
    public van_corrset_t()
    {
        z = new double[5];
        R = new double[25];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xf9eb61f4db52defeL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(perllcm.van_corrset_t.class))
            return 0L;
 
        classes.add(perllcm.van_corrset_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime_i); 
 
        outs.writeLong(this.utime_j); 
 
        for (int a = 0; a < 5; a++) {
            outs.writeDouble(this.z[a]); 
        }
 
        for (int a = 0; a < 25; a++) {
            outs.writeDouble(this.R[a]); 
        }
 
        outs.writeInt(this.npts); 
 
        for (int a = 0; a < this.npts; a++) {
            outs.writeFloat(this.u1[a]); 
        }
 
        for (int a = 0; a < this.npts; a++) {
            outs.writeFloat(this.v1[a]); 
        }
 
        for (int a = 0; a < this.npts; a++) {
            outs.writeFloat(this.u2[a]); 
        }
 
        for (int a = 0; a < this.npts; a++) {
            outs.writeFloat(this.v2[a]); 
        }
 
    }
 
    public van_corrset_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public van_corrset_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static perllcm.van_corrset_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        perllcm.van_corrset_t o = new perllcm.van_corrset_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime_i = ins.readLong();
 
        this.utime_j = ins.readLong();
 
        this.z = new double[(int) 5];
        for (int a = 0; a < 5; a++) {
            this.z[a] = ins.readDouble();
        }
 
        this.R = new double[(int) 25];
        for (int a = 0; a < 25; a++) {
            this.R[a] = ins.readDouble();
        }
 
        this.npts = ins.readInt();
 
        this.u1 = new float[(int) npts];
        for (int a = 0; a < this.npts; a++) {
            this.u1[a] = ins.readFloat();
        }
 
        this.v1 = new float[(int) npts];
        for (int a = 0; a < this.npts; a++) {
            this.v1[a] = ins.readFloat();
        }
 
        this.u2 = new float[(int) npts];
        for (int a = 0; a < this.npts; a++) {
            this.u2[a] = ins.readFloat();
        }
 
        this.v2 = new float[(int) npts];
        for (int a = 0; a < this.npts; a++) {
            this.v2[a] = ins.readFloat();
        }
 
    }
 
    public perllcm.van_corrset_t copy()
    {
        perllcm.van_corrset_t outobj = new perllcm.van_corrset_t();
        outobj.utime_i = this.utime_i;
 
        outobj.utime_j = this.utime_j;
 
        outobj.z = new double[(int) 5];
        System.arraycopy(this.z, 0, outobj.z, 0, 5); 
        outobj.R = new double[(int) 25];
        System.arraycopy(this.R, 0, outobj.R, 0, 25); 
        outobj.npts = this.npts;
 
        outobj.u1 = new float[(int) npts];
        if (this.npts > 0)
            System.arraycopy(this.u1, 0, outobj.u1, 0, this.npts); 
        outobj.v1 = new float[(int) npts];
        if (this.npts > 0)
            System.arraycopy(this.v1, 0, outobj.v1, 0, this.npts); 
        outobj.u2 = new float[(int) npts];
        if (this.npts > 0)
            System.arraycopy(this.u2, 0, outobj.u2, 0, this.npts); 
        outobj.v2 = new float[(int) npts];
        if (this.npts > 0)
            System.arraycopy(this.v2, 0, outobj.v2, 0, this.npts); 
        return outobj;
    }
 
}

