/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package perllcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class auv_os_conduit_osi_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public int yaw_top;
    public int yaw_bot;
    public int pitch_left;
    public int pitch_right;
    public int motor;
    public int mode;
    public int nextwp;
    public double latitude;
    public double longitude;
    public double speed;
    public double dist_to_nextwp;
    public int error;
    public double altimeter;
    public int park_time;
    public double magnetic_dec;
 
    public auv_os_conduit_osi_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x1f1196cfc1014a0cL;
 
    public static final int MODE_NORMAL = 1;
    public static final int MODE_STOPPED = 2;
    public static final int MODE_PARK = 3;
    public static final int MODE_MANUAL_PARK = 4;
    public static final int MODE_MANUAL_OVERRIDE = 5;
    public static final int MODE_SERVO = 6;
    public static final int MODE_MISSION = 7;
    public static final int ERR_NONE = 0;
    public static final int ERR_OVER_PITCH = 1;
    public static final int ERR_EXCEED_TIME = 2;
    public static final int ERR_LEAK = 3;
    public static final int ERR_NO_FORWARD_PROG = 4;
    public static final int ERR_EXCEED_MAX_DEPTH = 5;
    public static final int ERR_NO_UPWARD_PROG = 6;
    public static final int ERR_TOW_FLOAT_ENGAGED = 7;
    public static final int ERR_SAFETY_RET_PATH = 8;
    public static final int ERR_DFS_UNCHANGED = 9;
    public static final int ERR_COMPASS_STOPPED = 10;
    public static final int ERR_EXCEEDED_MIN_REQ_PWR = 11;
    public static final int ERR_STOP_AND_TRANSMIT_IRIDIUM = 12;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(perllcm.auv_os_conduit_osi_t.class))
            return 0L;
 
        classes.add(perllcm.auv_os_conduit_osi_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeInt(this.yaw_top); 
 
        outs.writeInt(this.yaw_bot); 
 
        outs.writeInt(this.pitch_left); 
 
        outs.writeInt(this.pitch_right); 
 
        outs.writeInt(this.motor); 
 
        outs.writeInt(this.mode); 
 
        outs.writeInt(this.nextwp); 
 
        outs.writeDouble(this.latitude); 
 
        outs.writeDouble(this.longitude); 
 
        outs.writeDouble(this.speed); 
 
        outs.writeDouble(this.dist_to_nextwp); 
 
        outs.writeInt(this.error); 
 
        outs.writeDouble(this.altimeter); 
 
        outs.writeInt(this.park_time); 
 
        outs.writeDouble(this.magnetic_dec); 
 
    }
 
    public auv_os_conduit_osi_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public auv_os_conduit_osi_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static perllcm.auv_os_conduit_osi_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        perllcm.auv_os_conduit_osi_t o = new perllcm.auv_os_conduit_osi_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.yaw_top = ins.readInt();
 
        this.yaw_bot = ins.readInt();
 
        this.pitch_left = ins.readInt();
 
        this.pitch_right = ins.readInt();
 
        this.motor = ins.readInt();
 
        this.mode = ins.readInt();
 
        this.nextwp = ins.readInt();
 
        this.latitude = ins.readDouble();
 
        this.longitude = ins.readDouble();
 
        this.speed = ins.readDouble();
 
        this.dist_to_nextwp = ins.readDouble();
 
        this.error = ins.readInt();
 
        this.altimeter = ins.readDouble();
 
        this.park_time = ins.readInt();
 
        this.magnetic_dec = ins.readDouble();
 
    }
 
    public perllcm.auv_os_conduit_osi_t copy()
    {
        perllcm.auv_os_conduit_osi_t outobj = new perllcm.auv_os_conduit_osi_t();
        outobj.utime = this.utime;
 
        outobj.yaw_top = this.yaw_top;
 
        outobj.yaw_bot = this.yaw_bot;
 
        outobj.pitch_left = this.pitch_left;
 
        outobj.pitch_right = this.pitch_right;
 
        outobj.motor = this.motor;
 
        outobj.mode = this.mode;
 
        outobj.nextwp = this.nextwp;
 
        outobj.latitude = this.latitude;
 
        outobj.longitude = this.longitude;
 
        outobj.speed = this.speed;
 
        outobj.dist_to_nextwp = this.dist_to_nextwp;
 
        outobj.error = this.error;
 
        outobj.altimeter = this.altimeter;
 
        outobj.park_time = this.park_time;
 
        outobj.magnetic_dec = this.magnetic_dec;
 
        return outobj;
    }
 
}

