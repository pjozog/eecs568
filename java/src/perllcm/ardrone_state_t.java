/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package perllcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class ardrone_state_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public float pitch;
    public float yaw;
    public float roll;
    public float altitude;
    public float vx;
    public float vy;
    public float vz;
    public float battery;
    public boolean flying;
 
    public ardrone_state_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xffdb1d59d3eee7ffL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(perllcm.ardrone_state_t.class))
            return 0L;
 
        classes.add(perllcm.ardrone_state_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeFloat(this.pitch); 
 
        outs.writeFloat(this.yaw); 
 
        outs.writeFloat(this.roll); 
 
        outs.writeFloat(this.altitude); 
 
        outs.writeFloat(this.vx); 
 
        outs.writeFloat(this.vy); 
 
        outs.writeFloat(this.vz); 
 
        outs.writeFloat(this.battery); 
 
        outs.writeByte( this.flying ? 1 : 0); 
 
    }
 
    public ardrone_state_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public ardrone_state_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static perllcm.ardrone_state_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        perllcm.ardrone_state_t o = new perllcm.ardrone_state_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.pitch = ins.readFloat();
 
        this.yaw = ins.readFloat();
 
        this.roll = ins.readFloat();
 
        this.altitude = ins.readFloat();
 
        this.vx = ins.readFloat();
 
        this.vy = ins.readFloat();
 
        this.vz = ins.readFloat();
 
        this.battery = ins.readFloat();
 
        this.flying = ins.readByte()!=0;
 
    }
 
    public perllcm.ardrone_state_t copy()
    {
        perllcm.ardrone_state_t outobj = new perllcm.ardrone_state_t();
        outobj.utime = this.utime;
 
        outobj.pitch = this.pitch;
 
        outobj.yaw = this.yaw;
 
        outobj.roll = this.roll;
 
        outobj.altitude = this.altitude;
 
        outobj.vx = this.vx;
 
        outobj.vy = this.vy;
 
        outobj.vz = this.vz;
 
        outobj.battery = this.battery;
 
        outobj.flying = this.flying;
 
        return outobj;
    }
 
}

