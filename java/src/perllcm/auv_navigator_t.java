/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package perllcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class auv_navigator_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public short est_method;
    public boolean init_data_ready;
    public boolean filter_running;
    public int state_len;
    public int mu_len;
    public int Sigma_len;
    public double mu[];
    public double Sigma[];
    public perllcm.est_navigator_index_t index;
    public double mu_latitude;
    public double mu_longitude;
    public double org_latitude;
    public double org_longitude;
 
    public auv_navigator_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x90b7468db2caae69L;
 
    public static final short EST_EKF = (short) 1;
    public static final short EST_UKF = (short) 2;
    public static final short EST_PF = (short) 3;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(perllcm.auv_navigator_t.class))
            return 0L;
 
        classes.add(perllcm.auv_navigator_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + perllcm.est_navigator_index_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeShort(this.est_method); 
 
        outs.writeByte( this.init_data_ready ? 1 : 0); 
 
        outs.writeByte( this.filter_running ? 1 : 0); 
 
        outs.writeInt(this.state_len); 
 
        outs.writeInt(this.mu_len); 
 
        outs.writeInt(this.Sigma_len); 
 
        for (int a = 0; a < this.mu_len; a++) {
            outs.writeDouble(this.mu[a]); 
        }
 
        for (int a = 0; a < this.Sigma_len; a++) {
            outs.writeDouble(this.Sigma[a]); 
        }
 
        this.index._encodeRecursive(outs); 
 
        outs.writeDouble(this.mu_latitude); 
 
        outs.writeDouble(this.mu_longitude); 
 
        outs.writeDouble(this.org_latitude); 
 
        outs.writeDouble(this.org_longitude); 
 
    }
 
    public auv_navigator_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public auv_navigator_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static perllcm.auv_navigator_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        perllcm.auv_navigator_t o = new perllcm.auv_navigator_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.est_method = ins.readShort();
 
        this.init_data_ready = ins.readByte()!=0;
 
        this.filter_running = ins.readByte()!=0;
 
        this.state_len = ins.readInt();
 
        this.mu_len = ins.readInt();
 
        this.Sigma_len = ins.readInt();
 
        this.mu = new double[(int) mu_len];
        for (int a = 0; a < this.mu_len; a++) {
            this.mu[a] = ins.readDouble();
        }
 
        this.Sigma = new double[(int) Sigma_len];
        for (int a = 0; a < this.Sigma_len; a++) {
            this.Sigma[a] = ins.readDouble();
        }
 
        this.index = perllcm.est_navigator_index_t._decodeRecursiveFactory(ins);
 
        this.mu_latitude = ins.readDouble();
 
        this.mu_longitude = ins.readDouble();
 
        this.org_latitude = ins.readDouble();
 
        this.org_longitude = ins.readDouble();
 
    }
 
    public perllcm.auv_navigator_t copy()
    {
        perllcm.auv_navigator_t outobj = new perllcm.auv_navigator_t();
        outobj.utime = this.utime;
 
        outobj.est_method = this.est_method;
 
        outobj.init_data_ready = this.init_data_ready;
 
        outobj.filter_running = this.filter_running;
 
        outobj.state_len = this.state_len;
 
        outobj.mu_len = this.mu_len;
 
        outobj.Sigma_len = this.Sigma_len;
 
        outobj.mu = new double[(int) mu_len];
        if (this.mu_len > 0)
            System.arraycopy(this.mu, 0, outobj.mu, 0, this.mu_len); 
        outobj.Sigma = new double[(int) Sigma_len];
        if (this.Sigma_len > 0)
            System.arraycopy(this.Sigma, 0, outobj.Sigma, 0, this.Sigma_len); 
        outobj.index = this.index.copy();
 
        outobj.mu_latitude = this.mu_latitude;
 
        outobj.mu_longitude = this.mu_longitude;
 
        outobj.org_latitude = this.org_latitude;
 
        outobj.org_longitude = this.org_longitude;
 
        return outobj;
    }
 
}

