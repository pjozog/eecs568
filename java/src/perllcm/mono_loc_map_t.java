/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package perllcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class mono_loc_map_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public long num_clusters;
    public perllcm.mono_loc_feat_cluster_t clusters[];
    public double orglat;
    public double orglon;
    public double orgalt;
 
    public mono_loc_map_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x8a73225f0e2fdb4dL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(perllcm.mono_loc_map_t.class))
            return 0L;
 
        classes.add(perllcm.mono_loc_map_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + perllcm.mono_loc_feat_cluster_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeLong(this.num_clusters); 
 
        for (int a = 0; a < this.num_clusters; a++) {
            this.clusters[a]._encodeRecursive(outs); 
        }
 
        outs.writeDouble(this.orglat); 
 
        outs.writeDouble(this.orglon); 
 
        outs.writeDouble(this.orgalt); 
 
    }
 
    public mono_loc_map_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public mono_loc_map_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static perllcm.mono_loc_map_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        perllcm.mono_loc_map_t o = new perllcm.mono_loc_map_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.num_clusters = ins.readLong();
 
        this.clusters = new perllcm.mono_loc_feat_cluster_t[(int) num_clusters];
        for (int a = 0; a < this.num_clusters; a++) {
            this.clusters[a] = perllcm.mono_loc_feat_cluster_t._decodeRecursiveFactory(ins);
        }
 
        this.orglat = ins.readDouble();
 
        this.orglon = ins.readDouble();
 
        this.orgalt = ins.readDouble();
 
    }
 
    public perllcm.mono_loc_map_t copy()
    {
        perllcm.mono_loc_map_t outobj = new perllcm.mono_loc_map_t();
        outobj.utime = this.utime;
 
        outobj.num_clusters = this.num_clusters;
 
        outobj.clusters = new perllcm.mono_loc_feat_cluster_t[(int) num_clusters];
        for (int a = 0; a < this.num_clusters; a++) {
            outobj.clusters[a] = this.clusters[a].copy();
        }
 
        outobj.orglat = this.orglat;
 
        outobj.orglon = this.orglon;
 
        outobj.orgalt = this.orgalt;
 
        return outobj;
    }
 
}

