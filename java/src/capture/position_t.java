/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package capture;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class position_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public String projection;
    public double easting;
    public double northing;
    public float height;
 
    public position_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x8fadc37bd07bc115L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(capture.position_t.class))
            return 0L;
 
        classes.add(capture.position_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.utime); 
 
        __strbuf = new char[this.projection.length()]; this.projection.getChars(0, this.projection.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeDouble(this.easting); 
 
        outs.writeDouble(this.northing); 
 
        outs.writeFloat(this.height); 
 
    }
 
    public position_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public position_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static capture.position_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        capture.position_t o = new capture.position_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.utime = ins.readLong();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.projection = new String(__strbuf);
 
        this.easting = ins.readDouble();
 
        this.northing = ins.readDouble();
 
        this.height = ins.readFloat();
 
    }
 
    public capture.position_t copy()
    {
        capture.position_t outobj = new capture.position_t();
        outobj.utime = this.utime;
 
        outobj.projection = this.projection;
 
        outobj.easting = this.easting;
 
        outobj.northing = this.northing;
 
        outobj.height = this.height;
 
        return outobj;
    }
 
}

