/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package perllcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class van_feature_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public int npts;
    public float u[];
    public float v[];
    public int keylen;
    public float keys[][];
    public int attrtype;
    public int attrsize;
    public byte attr[];
    public int usertype;
    public int usersize;
    public byte user[];
 
    public van_feature_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xe46485a54a3a03cdL;
 
    public static final int ATTRTYPE_NONE = 0;
    public static final int ATTRTYPE_CVSURF = 1;
    public static final int ATTRTYPE_CVHARRIS = 2;
    public static final int ATTRTYPE_SIFTGPU = 4;
    public static final int USERTYPE_NONE = 0;
    public static final int USERTYPE_DEPTH = 1;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(perllcm.van_feature_t.class))
            return 0L;
 
        classes.add(perllcm.van_feature_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeInt(this.npts); 
 
        for (int a = 0; a < this.npts; a++) {
            outs.writeFloat(this.u[a]); 
        }
 
        for (int a = 0; a < this.npts; a++) {
            outs.writeFloat(this.v[a]); 
        }
 
        outs.writeInt(this.keylen); 
 
        for (int a = 0; a < this.npts; a++) {
            for (int b = 0; b < this.keylen; b++) {
                outs.writeFloat(this.keys[a][b]); 
            }
        }
 
        outs.writeInt(this.attrtype); 
 
        outs.writeInt(this.attrsize); 
 
        if (this.attrsize > 0)
            outs.write(this.attr, 0, attrsize);
 
        outs.writeInt(this.usertype); 
 
        outs.writeInt(this.usersize); 
 
        if (this.usersize > 0)
            outs.write(this.user, 0, usersize);
 
    }
 
    public van_feature_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public van_feature_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static perllcm.van_feature_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        perllcm.van_feature_t o = new perllcm.van_feature_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.npts = ins.readInt();
 
        this.u = new float[(int) npts];
        for (int a = 0; a < this.npts; a++) {
            this.u[a] = ins.readFloat();
        }
 
        this.v = new float[(int) npts];
        for (int a = 0; a < this.npts; a++) {
            this.v[a] = ins.readFloat();
        }
 
        this.keylen = ins.readInt();
 
        this.keys = new float[(int) npts][(int) keylen];
        for (int a = 0; a < this.npts; a++) {
            for (int b = 0; b < this.keylen; b++) {
                this.keys[a][b] = ins.readFloat();
            }
        }
 
        this.attrtype = ins.readInt();
 
        this.attrsize = ins.readInt();
 
        this.attr = new byte[(int) attrsize];
        ins.readFully(this.attr, 0, attrsize); 
        this.usertype = ins.readInt();
 
        this.usersize = ins.readInt();
 
        this.user = new byte[(int) usersize];
        ins.readFully(this.user, 0, usersize); 
    }
 
    public perllcm.van_feature_t copy()
    {
        perllcm.van_feature_t outobj = new perllcm.van_feature_t();
        outobj.utime = this.utime;
 
        outobj.npts = this.npts;
 
        outobj.u = new float[(int) npts];
        if (this.npts > 0)
            System.arraycopy(this.u, 0, outobj.u, 0, this.npts); 
        outobj.v = new float[(int) npts];
        if (this.npts > 0)
            System.arraycopy(this.v, 0, outobj.v, 0, this.npts); 
        outobj.keylen = this.keylen;
 
        outobj.keys = new float[(int) npts][(int) keylen];
        for (int a = 0; a < this.npts; a++) {
            if (this.keylen > 0)
                System.arraycopy(this.keys[a], 0, outobj.keys[a], 0, this.keylen);        }
 
        outobj.attrtype = this.attrtype;
 
        outobj.attrsize = this.attrsize;
 
        outobj.attr = new byte[(int) attrsize];
        if (this.attrsize > 0)
            System.arraycopy(this.attr, 0, outobj.attr, 0, this.attrsize); 
        outobj.usertype = this.usertype;
 
        outobj.usersize = this.usersize;
 
        outobj.user = new byte[(int) usersize];
        if (this.usersize > 0)
            System.arraycopy(this.user, 0, outobj.user, 0, this.usersize); 
        return outobj;
    }
 
}

