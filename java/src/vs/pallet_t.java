/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package vs;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class pallet_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public long id;
    public long relative_to_id;
    public double pos[];
    public double orientation[];
    public double bbox_min[];
    public double bbox_max[];
    public vs.pallet_enum_t pallet_type;
    public int num_slot_pairs;
    public vs.pallet_slot_pair_t slot_pairs[];
 
    public pallet_t()
    {
        pos = new double[3];
        orientation = new double[4];
        bbox_min = new double[3];
        bbox_max = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x6bfdf151ca045c9aL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(vs.pallet_t.class))
            return 0L;
 
        classes.add(vs.pallet_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + vs.pallet_enum_t._hashRecursive(classes)
             + vs.pallet_slot_pair_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeLong(this.id); 
 
        outs.writeLong(this.relative_to_id); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.pos[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.orientation[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.bbox_min[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.bbox_max[a]); 
        }
 
        this.pallet_type._encodeRecursive(outs); 
 
        outs.writeInt(this.num_slot_pairs); 
 
        for (int a = 0; a < this.num_slot_pairs; a++) {
            this.slot_pairs[a]._encodeRecursive(outs); 
        }
 
    }
 
    public pallet_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public pallet_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static vs.pallet_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        vs.pallet_t o = new vs.pallet_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.id = ins.readLong();
 
        this.relative_to_id = ins.readLong();
 
        this.pos = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pos[a] = ins.readDouble();
        }
 
        this.orientation = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.orientation[a] = ins.readDouble();
        }
 
        this.bbox_min = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.bbox_min[a] = ins.readDouble();
        }
 
        this.bbox_max = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.bbox_max[a] = ins.readDouble();
        }
 
        this.pallet_type = vs.pallet_enum_t._decodeRecursiveFactory(ins);
 
        this.num_slot_pairs = ins.readInt();
 
        this.slot_pairs = new vs.pallet_slot_pair_t[(int) num_slot_pairs];
        for (int a = 0; a < this.num_slot_pairs; a++) {
            this.slot_pairs[a] = vs.pallet_slot_pair_t._decodeRecursiveFactory(ins);
        }
 
    }
 
    public vs.pallet_t copy()
    {
        vs.pallet_t outobj = new vs.pallet_t();
        outobj.utime = this.utime;
 
        outobj.id = this.id;
 
        outobj.relative_to_id = this.relative_to_id;
 
        outobj.pos = new double[(int) 3];
        System.arraycopy(this.pos, 0, outobj.pos, 0, 3); 
        outobj.orientation = new double[(int) 4];
        System.arraycopy(this.orientation, 0, outobj.orientation, 0, 4); 
        outobj.bbox_min = new double[(int) 3];
        System.arraycopy(this.bbox_min, 0, outobj.bbox_min, 0, 3); 
        outobj.bbox_max = new double[(int) 3];
        System.arraycopy(this.bbox_max, 0, outobj.bbox_max, 0, 3); 
        outobj.pallet_type = this.pallet_type.copy();
 
        outobj.num_slot_pairs = this.num_slot_pairs;
 
        outobj.slot_pairs = new vs.pallet_slot_pair_t[(int) num_slot_pairs];
        for (int a = 0; a < this.num_slot_pairs; a++) {
            outobj.slot_pairs[a] = this.slot_pairs[a].copy();
        }
 
        return outobj;
    }
 
}

