/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package mrlcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class points_t implements lcm.lcm.LCMEncodable
{
    public long id;
    public int collection;
    public long element_id;
    public int n;
    public double entries[][];
 
    public points_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xfb955457476dbecdL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(mrlcm.points_t.class))
            return 0L;
 
        classes.add(mrlcm.points_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.id); 
 
        outs.writeInt(this.collection); 
 
        outs.writeLong(this.element_id); 
 
        outs.writeInt(this.n); 
 
        for (int a = 0; a < this.n; a++) {
            for (int b = 0; b < 3; b++) {
                outs.writeDouble(this.entries[a][b]); 
            }
        }
 
    }
 
    public points_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public points_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static mrlcm.points_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        mrlcm.points_t o = new mrlcm.points_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.id = ins.readLong();
 
        this.collection = ins.readInt();
 
        this.element_id = ins.readLong();
 
        this.n = ins.readInt();
 
        this.entries = new double[(int) n][(int) 3];
        for (int a = 0; a < this.n; a++) {
            for (int b = 0; b < 3; b++) {
                this.entries[a][b] = ins.readDouble();
            }
        }
 
    }
 
    public mrlcm.points_t copy()
    {
        mrlcm.points_t outobj = new mrlcm.points_t();
        outobj.id = this.id;
 
        outobj.collection = this.collection;
 
        outobj.element_id = this.element_id;
 
        outobj.n = this.n;
 
        outobj.entries = new double[(int) n][(int) 3];
        for (int a = 0; a < this.n; a++) {
            System.arraycopy(this.entries[a], 0, outobj.entries[a], 0, 3);        }
 
        return outobj;
    }
 
}

