/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package senlcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class os_compass_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public double rph[];
    public double T;
    public double depth;
    public double p_volts;
    public double p_meas;
    public double p_gage;
    public double p_o;
    public double Mxyz[];
    public double Gxyz[];
 
    public os_compass_t()
    {
        rph = new double[3];
        Mxyz = new double[3];
        Gxyz = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xa1708942b089a7e8L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(senlcm.os_compass_t.class))
            return 0L;
 
        classes.add(senlcm.os_compass_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.rph[a]); 
        }
 
        outs.writeDouble(this.T); 
 
        outs.writeDouble(this.depth); 
 
        outs.writeDouble(this.p_volts); 
 
        outs.writeDouble(this.p_meas); 
 
        outs.writeDouble(this.p_gage); 
 
        outs.writeDouble(this.p_o); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Mxyz[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Gxyz[a]); 
        }
 
    }
 
    public os_compass_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public os_compass_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static senlcm.os_compass_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        senlcm.os_compass_t o = new senlcm.os_compass_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.rph = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.rph[a] = ins.readDouble();
        }
 
        this.T = ins.readDouble();
 
        this.depth = ins.readDouble();
 
        this.p_volts = ins.readDouble();
 
        this.p_meas = ins.readDouble();
 
        this.p_gage = ins.readDouble();
 
        this.p_o = ins.readDouble();
 
        this.Mxyz = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Mxyz[a] = ins.readDouble();
        }
 
        this.Gxyz = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Gxyz[a] = ins.readDouble();
        }
 
    }
 
    public senlcm.os_compass_t copy()
    {
        senlcm.os_compass_t outobj = new senlcm.os_compass_t();
        outobj.utime = this.utime;
 
        outobj.rph = new double[(int) 3];
        System.arraycopy(this.rph, 0, outobj.rph, 0, 3); 
        outobj.T = this.T;
 
        outobj.depth = this.depth;
 
        outobj.p_volts = this.p_volts;
 
        outobj.p_meas = this.p_meas;
 
        outobj.p_gage = this.p_gage;
 
        outobj.p_o = this.p_o;
 
        outobj.Mxyz = new double[(int) 3];
        System.arraycopy(this.Mxyz, 0, outobj.Mxyz, 0, 3); 
        outobj.Gxyz = new double[(int) 3];
        System.arraycopy(this.Gxyz, 0, outobj.Gxyz, 0, 3); 
        return outobj;
    }
 
}

