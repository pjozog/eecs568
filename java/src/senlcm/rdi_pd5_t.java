/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package senlcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class rdi_pd5_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public senlcm.rdi_pd4_t pd4;
    public double salinity;
    public double depth;
    public double pitch;
    public double roll;
    public double heading;
    public double dmg_btv[];
    public double dmg_wtv[];
 
    public rdi_pd5_t()
    {
        dmg_btv = new double[4];
        dmg_wtv = new double[4];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x94c4660b03ed5183L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(senlcm.rdi_pd5_t.class))
            return 0L;
 
        classes.add(senlcm.rdi_pd5_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + senlcm.rdi_pd4_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        this.pd4._encodeRecursive(outs); 
 
        outs.writeDouble(this.salinity); 
 
        outs.writeDouble(this.depth); 
 
        outs.writeDouble(this.pitch); 
 
        outs.writeDouble(this.roll); 
 
        outs.writeDouble(this.heading); 
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.dmg_btv[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.dmg_wtv[a]); 
        }
 
    }
 
    public rdi_pd5_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public rdi_pd5_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static senlcm.rdi_pd5_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        senlcm.rdi_pd5_t o = new senlcm.rdi_pd5_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.pd4 = senlcm.rdi_pd4_t._decodeRecursiveFactory(ins);
 
        this.salinity = ins.readDouble();
 
        this.depth = ins.readDouble();
 
        this.pitch = ins.readDouble();
 
        this.roll = ins.readDouble();
 
        this.heading = ins.readDouble();
 
        this.dmg_btv = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.dmg_btv[a] = ins.readDouble();
        }
 
        this.dmg_wtv = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.dmg_wtv[a] = ins.readDouble();
        }
 
    }
 
    public senlcm.rdi_pd5_t copy()
    {
        senlcm.rdi_pd5_t outobj = new senlcm.rdi_pd5_t();
        outobj.utime = this.utime;
 
        outobj.pd4 = this.pd4.copy();
 
        outobj.salinity = this.salinity;
 
        outobj.depth = this.depth;
 
        outobj.pitch = this.pitch;
 
        outobj.roll = this.roll;
 
        outobj.heading = this.heading;
 
        outobj.dmg_btv = new double[(int) 4];
        System.arraycopy(this.dmg_btv, 0, outobj.dmg_btv, 0, 4); 
        outobj.dmg_wtv = new double[(int) 4];
        System.arraycopy(this.dmg_wtv, 0, outobj.dmg_wtv, 0, 4); 
        return outobj;
    }
 
}

