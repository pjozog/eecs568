/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package perllcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class ferns_tracker_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public boolean found;
    public double pose[];
    public int number_of_inliers;
    public int number_of_corr;
    public double rms_error;
    public double H[];
 
    public ferns_tracker_t()
    {
        pose = new double[6];
        H = new double[9];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xfe355db5023fee12L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(perllcm.ferns_tracker_t.class))
            return 0L;
 
        classes.add(perllcm.ferns_tracker_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeByte( this.found ? 1 : 0); 
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.pose[a]); 
        }
 
        outs.writeInt(this.number_of_inliers); 
 
        outs.writeInt(this.number_of_corr); 
 
        outs.writeDouble(this.rms_error); 
 
        for (int a = 0; a < 9; a++) {
            outs.writeDouble(this.H[a]); 
        }
 
    }
 
    public ferns_tracker_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public ferns_tracker_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static perllcm.ferns_tracker_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        perllcm.ferns_tracker_t o = new perllcm.ferns_tracker_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.found = ins.readByte()!=0;
 
        this.pose = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.pose[a] = ins.readDouble();
        }
 
        this.number_of_inliers = ins.readInt();
 
        this.number_of_corr = ins.readInt();
 
        this.rms_error = ins.readDouble();
 
        this.H = new double[(int) 9];
        for (int a = 0; a < 9; a++) {
            this.H[a] = ins.readDouble();
        }
 
    }
 
    public perllcm.ferns_tracker_t copy()
    {
        perllcm.ferns_tracker_t outobj = new perllcm.ferns_tracker_t();
        outobj.utime = this.utime;
 
        outobj.found = this.found;
 
        outobj.pose = new double[(int) 6];
        System.arraycopy(this.pose, 0, outobj.pose, 0, 6); 
        outobj.number_of_inliers = this.number_of_inliers;
 
        outobj.number_of_corr = this.number_of_corr;
 
        outobj.rms_error = this.rms_error;
 
        outobj.H = new double[(int) 9];
        System.arraycopy(this.H, 0, outobj.H, 0, 9); 
        return outobj;
    }
 
}

