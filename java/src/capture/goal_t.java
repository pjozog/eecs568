/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package capture;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class goal_t implements lcm.lcm.LCMEncodable
{
    public long timestamp;
    public int goal_id;
    public double xpos1;
    public double ypos1;
    public double zpos1;
    public double xpos2;
    public double ypos2;
    public double zpos2;
    public double heading;
    public double xy_vel;
    public double z_vel;
    public double cmd_timeout;
    public double mission_timeout;
    public double max_depth;
    public double min_alt;
 
    public goal_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x7865d988a65fc445L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(capture.goal_t.class))
            return 0L;
 
        classes.add(capture.goal_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.timestamp); 
 
        outs.writeInt(this.goal_id); 
 
        outs.writeDouble(this.xpos1); 
 
        outs.writeDouble(this.ypos1); 
 
        outs.writeDouble(this.zpos1); 
 
        outs.writeDouble(this.xpos2); 
 
        outs.writeDouble(this.ypos2); 
 
        outs.writeDouble(this.zpos2); 
 
        outs.writeDouble(this.heading); 
 
        outs.writeDouble(this.xy_vel); 
 
        outs.writeDouble(this.z_vel); 
 
        outs.writeDouble(this.cmd_timeout); 
 
        outs.writeDouble(this.mission_timeout); 
 
        outs.writeDouble(this.max_depth); 
 
        outs.writeDouble(this.min_alt); 
 
    }
 
    public goal_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public goal_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static capture.goal_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        capture.goal_t o = new capture.goal_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.timestamp = ins.readLong();
 
        this.goal_id = ins.readInt();
 
        this.xpos1 = ins.readDouble();
 
        this.ypos1 = ins.readDouble();
 
        this.zpos1 = ins.readDouble();
 
        this.xpos2 = ins.readDouble();
 
        this.ypos2 = ins.readDouble();
 
        this.zpos2 = ins.readDouble();
 
        this.heading = ins.readDouble();
 
        this.xy_vel = ins.readDouble();
 
        this.z_vel = ins.readDouble();
 
        this.cmd_timeout = ins.readDouble();
 
        this.mission_timeout = ins.readDouble();
 
        this.max_depth = ins.readDouble();
 
        this.min_alt = ins.readDouble();
 
    }
 
    public capture.goal_t copy()
    {
        capture.goal_t outobj = new capture.goal_t();
        outobj.timestamp = this.timestamp;
 
        outobj.goal_id = this.goal_id;
 
        outobj.xpos1 = this.xpos1;
 
        outobj.ypos1 = this.ypos1;
 
        outobj.zpos1 = this.zpos1;
 
        outobj.xpos2 = this.xpos2;
 
        outobj.ypos2 = this.ypos2;
 
        outobj.zpos2 = this.zpos2;
 
        outobj.heading = this.heading;
 
        outobj.xy_vel = this.xy_vel;
 
        outobj.z_vel = this.z_vel;
 
        outobj.cmd_timeout = this.cmd_timeout;
 
        outobj.mission_timeout = this.mission_timeout;
 
        outobj.max_depth = this.max_depth;
 
        outobj.min_alt = this.min_alt;
 
        return outobj;
    }
 
}

