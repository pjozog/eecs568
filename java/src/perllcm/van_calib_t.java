/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package perllcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class van_calib_t implements lcm.lcm.LCMEncodable
{
    public int width;
    public int height;
    public double fc[];
    public double cc[];
    public double alpha_c;
    public double fc_std[];
    public double cc_std[];
    public double alpha_c_std;
    public double kc[];
    public double kc_std[];
    public int kc_model;
    public double K[];
    public double Kinv[];
    public double fov[];
 
    public van_calib_t()
    {
        fc = new double[2];
        cc = new double[2];
        fc_std = new double[2];
        cc_std = new double[2];
        kc = new double[5];
        kc_std = new double[5];
        K = new double[9];
        Kinv = new double[9];
        fov = new double[2];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x41bdf4eaf76fd2d2L;
 
    public static final int KC_MODEL_RADIAL = 0;
    public static final int KC_MODEL_RADTAN = 1;
    public static final int KC_MODEL_SPHERICAL = 2;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(perllcm.van_calib_t.class))
            return 0L;
 
        classes.add(perllcm.van_calib_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.width); 
 
        outs.writeInt(this.height); 
 
        for (int a = 0; a < 2; a++) {
            outs.writeDouble(this.fc[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeDouble(this.cc[a]); 
        }
 
        outs.writeDouble(this.alpha_c); 
 
        for (int a = 0; a < 2; a++) {
            outs.writeDouble(this.fc_std[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeDouble(this.cc_std[a]); 
        }
 
        outs.writeDouble(this.alpha_c_std); 
 
        for (int a = 0; a < 5; a++) {
            outs.writeDouble(this.kc[a]); 
        }
 
        for (int a = 0; a < 5; a++) {
            outs.writeDouble(this.kc_std[a]); 
        }
 
        outs.writeInt(this.kc_model); 
 
        for (int a = 0; a < 9; a++) {
            outs.writeDouble(this.K[a]); 
        }
 
        for (int a = 0; a < 9; a++) {
            outs.writeDouble(this.Kinv[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeDouble(this.fov[a]); 
        }
 
    }
 
    public van_calib_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public van_calib_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static perllcm.van_calib_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        perllcm.van_calib_t o = new perllcm.van_calib_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.width = ins.readInt();
 
        this.height = ins.readInt();
 
        this.fc = new double[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.fc[a] = ins.readDouble();
        }
 
        this.cc = new double[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.cc[a] = ins.readDouble();
        }
 
        this.alpha_c = ins.readDouble();
 
        this.fc_std = new double[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.fc_std[a] = ins.readDouble();
        }
 
        this.cc_std = new double[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.cc_std[a] = ins.readDouble();
        }
 
        this.alpha_c_std = ins.readDouble();
 
        this.kc = new double[(int) 5];
        for (int a = 0; a < 5; a++) {
            this.kc[a] = ins.readDouble();
        }
 
        this.kc_std = new double[(int) 5];
        for (int a = 0; a < 5; a++) {
            this.kc_std[a] = ins.readDouble();
        }
 
        this.kc_model = ins.readInt();
 
        this.K = new double[(int) 9];
        for (int a = 0; a < 9; a++) {
            this.K[a] = ins.readDouble();
        }
 
        this.Kinv = new double[(int) 9];
        for (int a = 0; a < 9; a++) {
            this.Kinv[a] = ins.readDouble();
        }
 
        this.fov = new double[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.fov[a] = ins.readDouble();
        }
 
    }
 
    public perllcm.van_calib_t copy()
    {
        perllcm.van_calib_t outobj = new perllcm.van_calib_t();
        outobj.width = this.width;
 
        outobj.height = this.height;
 
        outobj.fc = new double[(int) 2];
        System.arraycopy(this.fc, 0, outobj.fc, 0, 2); 
        outobj.cc = new double[(int) 2];
        System.arraycopy(this.cc, 0, outobj.cc, 0, 2); 
        outobj.alpha_c = this.alpha_c;
 
        outobj.fc_std = new double[(int) 2];
        System.arraycopy(this.fc_std, 0, outobj.fc_std, 0, 2); 
        outobj.cc_std = new double[(int) 2];
        System.arraycopy(this.cc_std, 0, outobj.cc_std, 0, 2); 
        outobj.alpha_c_std = this.alpha_c_std;
 
        outobj.kc = new double[(int) 5];
        System.arraycopy(this.kc, 0, outobj.kc, 0, 5); 
        outobj.kc_std = new double[(int) 5];
        System.arraycopy(this.kc_std, 0, outobj.kc_std, 0, 5); 
        outobj.kc_model = this.kc_model;
 
        outobj.K = new double[(int) 9];
        System.arraycopy(this.K, 0, outobj.K, 0, 9); 
        outobj.Kinv = new double[(int) 9];
        System.arraycopy(this.Kinv, 0, outobj.Kinv, 0, 9); 
        outobj.fov = new double[(int) 2];
        System.arraycopy(this.fov, 0, outobj.fov, 0, 2); 
        return outobj;
    }
 
}

