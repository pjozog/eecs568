/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package vs;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class point3d_list_t implements lcm.lcm.LCMEncodable
{
    public long id;
    public int collection;
    public long element_id;
    public int npoints;
    public vs.point3d_t points[];
    public int ncolors;
    public vs.color_t colors[];
    public int nnormals;
    public vs.point3d_t normals[];
    public int npointids;
    public long pointids[];
 
    public point3d_list_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x2263a93c769566c1L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(vs.point3d_list_t.class))
            return 0L;
 
        classes.add(vs.point3d_list_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + vs.point3d_t._hashRecursive(classes)
             + vs.color_t._hashRecursive(classes)
             + vs.point3d_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.id); 
 
        outs.writeInt(this.collection); 
 
        outs.writeLong(this.element_id); 
 
        outs.writeInt(this.npoints); 
 
        for (int a = 0; a < this.npoints; a++) {
            this.points[a]._encodeRecursive(outs); 
        }
 
        outs.writeInt(this.ncolors); 
 
        for (int a = 0; a < this.ncolors; a++) {
            this.colors[a]._encodeRecursive(outs); 
        }
 
        outs.writeInt(this.nnormals); 
 
        for (int a = 0; a < this.nnormals; a++) {
            this.normals[a]._encodeRecursive(outs); 
        }
 
        outs.writeInt(this.npointids); 
 
        for (int a = 0; a < this.npointids; a++) {
            outs.writeLong(this.pointids[a]); 
        }
 
    }
 
    public point3d_list_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public point3d_list_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static vs.point3d_list_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        vs.point3d_list_t o = new vs.point3d_list_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.id = ins.readLong();
 
        this.collection = ins.readInt();
 
        this.element_id = ins.readLong();
 
        this.npoints = ins.readInt();
 
        this.points = new vs.point3d_t[(int) npoints];
        for (int a = 0; a < this.npoints; a++) {
            this.points[a] = vs.point3d_t._decodeRecursiveFactory(ins);
        }
 
        this.ncolors = ins.readInt();
 
        this.colors = new vs.color_t[(int) ncolors];
        for (int a = 0; a < this.ncolors; a++) {
            this.colors[a] = vs.color_t._decodeRecursiveFactory(ins);
        }
 
        this.nnormals = ins.readInt();
 
        this.normals = new vs.point3d_t[(int) nnormals];
        for (int a = 0; a < this.nnormals; a++) {
            this.normals[a] = vs.point3d_t._decodeRecursiveFactory(ins);
        }
 
        this.npointids = ins.readInt();
 
        this.pointids = new long[(int) npointids];
        for (int a = 0; a < this.npointids; a++) {
            this.pointids[a] = ins.readLong();
        }
 
    }
 
    public vs.point3d_list_t copy()
    {
        vs.point3d_list_t outobj = new vs.point3d_list_t();
        outobj.id = this.id;
 
        outobj.collection = this.collection;
 
        outobj.element_id = this.element_id;
 
        outobj.npoints = this.npoints;
 
        outobj.points = new vs.point3d_t[(int) npoints];
        for (int a = 0; a < this.npoints; a++) {
            outobj.points[a] = this.points[a].copy();
        }
 
        outobj.ncolors = this.ncolors;
 
        outobj.colors = new vs.color_t[(int) ncolors];
        for (int a = 0; a < this.ncolors; a++) {
            outobj.colors[a] = this.colors[a].copy();
        }
 
        outobj.nnormals = this.nnormals;
 
        outobj.normals = new vs.point3d_t[(int) nnormals];
        for (int a = 0; a < this.nnormals; a++) {
            outobj.normals[a] = this.normals[a].copy();
        }
 
        outobj.npointids = this.npointids;
 
        outobj.pointids = new long[(int) npointids];
        if (this.npointids > 0)
            System.arraycopy(this.pointids, 0, outobj.pointids, 0, this.npointids); 
        return outobj;
    }
 
}

