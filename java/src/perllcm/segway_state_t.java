/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package perllcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class segway_state_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public float pitch_angle;
    public float pitch_rate;
    public float roll_angle;
    public float roll_rate;
    public float left_wheel_velocity;
    public float right_wheel_velocity;
    public float yaw_rate;
    public float servo_frames;
    public float left_wheel_displacement;
    public float right_wheel_displacement;
    public float forward_displacement;
    public float yaw_displacement;
    public float left_motor_torque;
    public float right_motor_torque;
    public float user_voltage;
    public float powerbase_voltage;
 
    public segway_state_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xf6a21aae9e14125fL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(perllcm.segway_state_t.class))
            return 0L;
 
        classes.add(perllcm.segway_state_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeFloat(this.pitch_angle); 
 
        outs.writeFloat(this.pitch_rate); 
 
        outs.writeFloat(this.roll_angle); 
 
        outs.writeFloat(this.roll_rate); 
 
        outs.writeFloat(this.left_wheel_velocity); 
 
        outs.writeFloat(this.right_wheel_velocity); 
 
        outs.writeFloat(this.yaw_rate); 
 
        outs.writeFloat(this.servo_frames); 
 
        outs.writeFloat(this.left_wheel_displacement); 
 
        outs.writeFloat(this.right_wheel_displacement); 
 
        outs.writeFloat(this.forward_displacement); 
 
        outs.writeFloat(this.yaw_displacement); 
 
        outs.writeFloat(this.left_motor_torque); 
 
        outs.writeFloat(this.right_motor_torque); 
 
        outs.writeFloat(this.user_voltage); 
 
        outs.writeFloat(this.powerbase_voltage); 
 
    }
 
    public segway_state_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public segway_state_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static perllcm.segway_state_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        perllcm.segway_state_t o = new perllcm.segway_state_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.pitch_angle = ins.readFloat();
 
        this.pitch_rate = ins.readFloat();
 
        this.roll_angle = ins.readFloat();
 
        this.roll_rate = ins.readFloat();
 
        this.left_wheel_velocity = ins.readFloat();
 
        this.right_wheel_velocity = ins.readFloat();
 
        this.yaw_rate = ins.readFloat();
 
        this.servo_frames = ins.readFloat();
 
        this.left_wheel_displacement = ins.readFloat();
 
        this.right_wheel_displacement = ins.readFloat();
 
        this.forward_displacement = ins.readFloat();
 
        this.yaw_displacement = ins.readFloat();
 
        this.left_motor_torque = ins.readFloat();
 
        this.right_motor_torque = ins.readFloat();
 
        this.user_voltage = ins.readFloat();
 
        this.powerbase_voltage = ins.readFloat();
 
    }
 
    public perllcm.segway_state_t copy()
    {
        perllcm.segway_state_t outobj = new perllcm.segway_state_t();
        outobj.utime = this.utime;
 
        outobj.pitch_angle = this.pitch_angle;
 
        outobj.pitch_rate = this.pitch_rate;
 
        outobj.roll_angle = this.roll_angle;
 
        outobj.roll_rate = this.roll_rate;
 
        outobj.left_wheel_velocity = this.left_wheel_velocity;
 
        outobj.right_wheel_velocity = this.right_wheel_velocity;
 
        outobj.yaw_rate = this.yaw_rate;
 
        outobj.servo_frames = this.servo_frames;
 
        outobj.left_wheel_displacement = this.left_wheel_displacement;
 
        outobj.right_wheel_displacement = this.right_wheel_displacement;
 
        outobj.forward_displacement = this.forward_displacement;
 
        outobj.yaw_displacement = this.yaw_displacement;
 
        outobj.left_motor_torque = this.left_motor_torque;
 
        outobj.right_motor_torque = this.right_motor_torque;
 
        outobj.user_voltage = this.user_voltage;
 
        outobj.powerbase_voltage = this.powerbase_voltage;
 
        return outobj;
    }
 
}

