/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package perllcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class van_vlink_t implements lcm.lcm.LCMEncodable
{
    public long utime_i;
    public long utime_j;
    public int type;
    public int msg;
    public double z[];
    public double R[];
    public int n_inliers;
    public int isel_i[];
    public int isel_j[];
    public double S_L;
    public double Ig;
 
    public van_vlink_t()
    {
        z = new double[6];
        R = new double[36];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xf25da72b82244a09L;
 
    public static final int TYPE_ERROR = -1;
    public static final int TYPE_5DOF_EPIPOLAR = 1;
    public static final int TYPE_5DOF_HOMOGRAPHY = 2;
    public static final int MSG_NO_ERROR = 0;
    public static final int MSG_MIN_PCCS = 1;
    public static final int MSG_MIN_INLIERS_E = 2;
    public static final int MSG_MIN_INLIERS_H = 3;
    public static final int MSG_SBA_E_ERROR = 4;
    public static final int MSG_SBA_H_ERROR = 5;
    public static final int MSG_NO_MODEL_FIT = 6;
    public static final int MSG_MDIST_NAV = 7;
    public static final int MSG_TRI_CONST = 8;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(perllcm.van_vlink_t.class))
            return 0L;
 
        classes.add(perllcm.van_vlink_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime_i); 
 
        outs.writeLong(this.utime_j); 
 
        outs.writeInt(this.type); 
 
        outs.writeInt(this.msg); 
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.z[a]); 
        }
 
        for (int a = 0; a < 36; a++) {
            outs.writeDouble(this.R[a]); 
        }
 
        outs.writeInt(this.n_inliers); 
 
        for (int a = 0; a < this.n_inliers; a++) {
            outs.writeInt(this.isel_i[a]); 
        }
 
        for (int a = 0; a < this.n_inliers; a++) {
            outs.writeInt(this.isel_j[a]); 
        }
 
        outs.writeDouble(this.S_L); 
 
        outs.writeDouble(this.Ig); 
 
    }
 
    public van_vlink_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public van_vlink_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static perllcm.van_vlink_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        perllcm.van_vlink_t o = new perllcm.van_vlink_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime_i = ins.readLong();
 
        this.utime_j = ins.readLong();
 
        this.type = ins.readInt();
 
        this.msg = ins.readInt();
 
        this.z = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.z[a] = ins.readDouble();
        }
 
        this.R = new double[(int) 36];
        for (int a = 0; a < 36; a++) {
            this.R[a] = ins.readDouble();
        }
 
        this.n_inliers = ins.readInt();
 
        this.isel_i = new int[(int) n_inliers];
        for (int a = 0; a < this.n_inliers; a++) {
            this.isel_i[a] = ins.readInt();
        }
 
        this.isel_j = new int[(int) n_inliers];
        for (int a = 0; a < this.n_inliers; a++) {
            this.isel_j[a] = ins.readInt();
        }
 
        this.S_L = ins.readDouble();
 
        this.Ig = ins.readDouble();
 
    }
 
    public perllcm.van_vlink_t copy()
    {
        perllcm.van_vlink_t outobj = new perllcm.van_vlink_t();
        outobj.utime_i = this.utime_i;
 
        outobj.utime_j = this.utime_j;
 
        outobj.type = this.type;
 
        outobj.msg = this.msg;
 
        outobj.z = new double[(int) 6];
        System.arraycopy(this.z, 0, outobj.z, 0, 6); 
        outobj.R = new double[(int) 36];
        System.arraycopy(this.R, 0, outobj.R, 0, 36); 
        outobj.n_inliers = this.n_inliers;
 
        outobj.isel_i = new int[(int) n_inliers];
        if (this.n_inliers > 0)
            System.arraycopy(this.isel_i, 0, outobj.isel_i, 0, this.n_inliers); 
        outobj.isel_j = new int[(int) n_inliers];
        if (this.n_inliers > 0)
            System.arraycopy(this.isel_j, 0, outobj.isel_j, 0, this.n_inliers); 
        outobj.S_L = this.S_L;
 
        outobj.Ig = this.Ig;
 
        return outobj;
    }
 
}

