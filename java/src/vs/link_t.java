/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package vs;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class link_t implements lcm.lcm.LCMEncodable
{
    public long id;
    public int collection1;
    public long id1;
    public int collection2;
    public long id2;
 
    public link_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x43ac3d9ca40a9ad6L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(vs.link_t.class))
            return 0L;
 
        classes.add(vs.link_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.id); 
 
        outs.writeInt(this.collection1); 
 
        outs.writeLong(this.id1); 
 
        outs.writeInt(this.collection2); 
 
        outs.writeLong(this.id2); 
 
    }
 
    public link_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public link_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static vs.link_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        vs.link_t o = new vs.link_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.id = ins.readLong();
 
        this.collection1 = ins.readInt();
 
        this.id1 = ins.readLong();
 
        this.collection2 = ins.readInt();
 
        this.id2 = ins.readLong();
 
    }
 
    public vs.link_t copy()
    {
        vs.link_t outobj = new vs.link_t();
        outobj.id = this.id;
 
        outobj.collection1 = this.collection1;
 
        outobj.id1 = this.id1;
 
        outobj.collection2 = this.collection2;
 
        outobj.id2 = this.id2;
 
        return outobj;
    }
 
}

