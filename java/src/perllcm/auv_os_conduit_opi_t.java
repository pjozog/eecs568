/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package perllcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class auv_os_conduit_opi_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public double percent;
    public double remaining_cap;
    public double pwr;
    public double volts;
    public double current;
    public double time_til;
    public int batt_state;
    public int leak;
 
    public auv_os_conduit_opi_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x15a2b44826729a41L;
 
    public static final int BS_CHARGING = 1;
    public static final int BS_DISCHARGING = 2;
    public static final int BS_FAULT = 3;
    public static final int NOLEAK = 0;
    public static final int LEAK = 1;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(perllcm.auv_os_conduit_opi_t.class))
            return 0L;
 
        classes.add(perllcm.auv_os_conduit_opi_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeDouble(this.percent); 
 
        outs.writeDouble(this.remaining_cap); 
 
        outs.writeDouble(this.pwr); 
 
        outs.writeDouble(this.volts); 
 
        outs.writeDouble(this.current); 
 
        outs.writeDouble(this.time_til); 
 
        outs.writeInt(this.batt_state); 
 
        outs.writeInt(this.leak); 
 
    }
 
    public auv_os_conduit_opi_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public auv_os_conduit_opi_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static perllcm.auv_os_conduit_opi_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        perllcm.auv_os_conduit_opi_t o = new perllcm.auv_os_conduit_opi_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.percent = ins.readDouble();
 
        this.remaining_cap = ins.readDouble();
 
        this.pwr = ins.readDouble();
 
        this.volts = ins.readDouble();
 
        this.current = ins.readDouble();
 
        this.time_til = ins.readDouble();
 
        this.batt_state = ins.readInt();
 
        this.leak = ins.readInt();
 
    }
 
    public perllcm.auv_os_conduit_opi_t copy()
    {
        perllcm.auv_os_conduit_opi_t outobj = new perllcm.auv_os_conduit_opi_t();
        outobj.utime = this.utime;
 
        outobj.percent = this.percent;
 
        outobj.remaining_cap = this.remaining_cap;
 
        outobj.pwr = this.pwr;
 
        outobj.volts = this.volts;
 
        outobj.current = this.current;
 
        outobj.time_til = this.time_til;
 
        outobj.batt_state = this.batt_state;
 
        outobj.leak = this.leak;
 
        return outobj;
    }
 
}

