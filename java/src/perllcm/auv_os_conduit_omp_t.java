/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package perllcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class auv_os_conduit_omp_t implements lcm.lcm.LCMEncodable
{
    public int yaw_top;
    public int yaw_bot;
    public int pitch_left;
    public int pitch_right;
    public int motor;
    public int timeout;
 
    public auv_os_conduit_omp_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x5358fc176aaf9137L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(perllcm.auv_os_conduit_omp_t.class))
            return 0L;
 
        classes.add(perllcm.auv_os_conduit_omp_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.yaw_top); 
 
        outs.writeInt(this.yaw_bot); 
 
        outs.writeInt(this.pitch_left); 
 
        outs.writeInt(this.pitch_right); 
 
        outs.writeInt(this.motor); 
 
        outs.writeInt(this.timeout); 
 
    }
 
    public auv_os_conduit_omp_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public auv_os_conduit_omp_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static perllcm.auv_os_conduit_omp_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        perllcm.auv_os_conduit_omp_t o = new perllcm.auv_os_conduit_omp_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.yaw_top = ins.readInt();
 
        this.yaw_bot = ins.readInt();
 
        this.pitch_left = ins.readInt();
 
        this.pitch_right = ins.readInt();
 
        this.motor = ins.readInt();
 
        this.timeout = ins.readInt();
 
    }
 
    public perllcm.auv_os_conduit_omp_t copy()
    {
        perllcm.auv_os_conduit_omp_t outobj = new perllcm.auv_os_conduit_omp_t();
        outobj.yaw_top = this.yaw_top;
 
        outobj.yaw_bot = this.yaw_bot;
 
        outobj.pitch_left = this.pitch_left;
 
        outobj.pitch_right = this.pitch_right;
 
        outobj.motor = this.motor;
 
        outobj.timeout = this.timeout;
 
        return outobj;
    }
 
}

