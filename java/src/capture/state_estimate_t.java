/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package capture;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class state_estimate_t implements lcm.lcm.LCMEncodable
{
    public long timestamp;
    public boolean estimator_is_stable;
    public double x_ctl_wld;
    public double y_ctl_wld;
    public double x_cg_wld;
    public double y_cg_wld;
    public double depth;
    public double depth_rate;
    public double altitude;
    public double heading;
    public double heading_rate;
    public double roll;
    public double pitch;
    public double gim_roll;
    public double gim_pitch;
    public double temperature;
    public double vx_wld;
    public double vy_wld;
    public double vz_wld;
    public double vx_veh;
    public double vy_veh;
    public double vz_veh;
    public double vx_cg_wld;
    public double vy_cg_wld;
    public double vx_cg_veh;
    public double vy_cg_veh;
 
    public state_estimate_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xd4099e4a263eb557L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(capture.state_estimate_t.class))
            return 0L;
 
        classes.add(capture.state_estimate_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.timestamp); 
 
        outs.writeByte( this.estimator_is_stable ? 1 : 0); 
 
        outs.writeDouble(this.x_ctl_wld); 
 
        outs.writeDouble(this.y_ctl_wld); 
 
        outs.writeDouble(this.x_cg_wld); 
 
        outs.writeDouble(this.y_cg_wld); 
 
        outs.writeDouble(this.depth); 
 
        outs.writeDouble(this.depth_rate); 
 
        outs.writeDouble(this.altitude); 
 
        outs.writeDouble(this.heading); 
 
        outs.writeDouble(this.heading_rate); 
 
        outs.writeDouble(this.roll); 
 
        outs.writeDouble(this.pitch); 
 
        outs.writeDouble(this.gim_roll); 
 
        outs.writeDouble(this.gim_pitch); 
 
        outs.writeDouble(this.temperature); 
 
        outs.writeDouble(this.vx_wld); 
 
        outs.writeDouble(this.vy_wld); 
 
        outs.writeDouble(this.vz_wld); 
 
        outs.writeDouble(this.vx_veh); 
 
        outs.writeDouble(this.vy_veh); 
 
        outs.writeDouble(this.vz_veh); 
 
        outs.writeDouble(this.vx_cg_wld); 
 
        outs.writeDouble(this.vy_cg_wld); 
 
        outs.writeDouble(this.vx_cg_veh); 
 
        outs.writeDouble(this.vy_cg_veh); 
 
    }
 
    public state_estimate_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public state_estimate_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static capture.state_estimate_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        capture.state_estimate_t o = new capture.state_estimate_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.timestamp = ins.readLong();
 
        this.estimator_is_stable = ins.readByte()!=0;
 
        this.x_ctl_wld = ins.readDouble();
 
        this.y_ctl_wld = ins.readDouble();
 
        this.x_cg_wld = ins.readDouble();
 
        this.y_cg_wld = ins.readDouble();
 
        this.depth = ins.readDouble();
 
        this.depth_rate = ins.readDouble();
 
        this.altitude = ins.readDouble();
 
        this.heading = ins.readDouble();
 
        this.heading_rate = ins.readDouble();
 
        this.roll = ins.readDouble();
 
        this.pitch = ins.readDouble();
 
        this.gim_roll = ins.readDouble();
 
        this.gim_pitch = ins.readDouble();
 
        this.temperature = ins.readDouble();
 
        this.vx_wld = ins.readDouble();
 
        this.vy_wld = ins.readDouble();
 
        this.vz_wld = ins.readDouble();
 
        this.vx_veh = ins.readDouble();
 
        this.vy_veh = ins.readDouble();
 
        this.vz_veh = ins.readDouble();
 
        this.vx_cg_wld = ins.readDouble();
 
        this.vy_cg_wld = ins.readDouble();
 
        this.vx_cg_veh = ins.readDouble();
 
        this.vy_cg_veh = ins.readDouble();
 
    }
 
    public capture.state_estimate_t copy()
    {
        capture.state_estimate_t outobj = new capture.state_estimate_t();
        outobj.timestamp = this.timestamp;
 
        outobj.estimator_is_stable = this.estimator_is_stable;
 
        outobj.x_ctl_wld = this.x_ctl_wld;
 
        outobj.y_ctl_wld = this.y_ctl_wld;
 
        outobj.x_cg_wld = this.x_cg_wld;
 
        outobj.y_cg_wld = this.y_cg_wld;
 
        outobj.depth = this.depth;
 
        outobj.depth_rate = this.depth_rate;
 
        outobj.altitude = this.altitude;
 
        outobj.heading = this.heading;
 
        outobj.heading_rate = this.heading_rate;
 
        outobj.roll = this.roll;
 
        outobj.pitch = this.pitch;
 
        outobj.gim_roll = this.gim_roll;
 
        outobj.gim_pitch = this.gim_pitch;
 
        outobj.temperature = this.temperature;
 
        outobj.vx_wld = this.vx_wld;
 
        outobj.vy_wld = this.vy_wld;
 
        outobj.vz_wld = this.vz_wld;
 
        outobj.vx_veh = this.vx_veh;
 
        outobj.vy_veh = this.vy_veh;
 
        outobj.vz_veh = this.vz_veh;
 
        outobj.vx_cg_wld = this.vx_cg_wld;
 
        outobj.vy_cg_wld = this.vy_cg_wld;
 
        outobj.vx_cg_veh = this.vx_cg_veh;
 
        outobj.vy_cg_veh = this.vy_cg_veh;
 
        return outobj;
    }
 
}

