/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package perllcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class mono_loc_feat_t implements lcm.lcm.LCMEncodable
{
    public double desc[];
    public double X[];
    public double view_aiz;
 
    public mono_loc_feat_t()
    {
        desc = new double[128];
        X = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xe3156efa76e22c31L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(perllcm.mono_loc_feat_t.class))
            return 0L;
 
        classes.add(perllcm.mono_loc_feat_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 128; a++) {
            outs.writeDouble(this.desc[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.X[a]); 
        }
 
        outs.writeDouble(this.view_aiz); 
 
    }
 
    public mono_loc_feat_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public mono_loc_feat_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static perllcm.mono_loc_feat_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        perllcm.mono_loc_feat_t o = new perllcm.mono_loc_feat_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.desc = new double[(int) 128];
        for (int a = 0; a < 128; a++) {
            this.desc[a] = ins.readDouble();
        }
 
        this.X = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.X[a] = ins.readDouble();
        }
 
        this.view_aiz = ins.readDouble();
 
    }
 
    public perllcm.mono_loc_feat_t copy()
    {
        perllcm.mono_loc_feat_t outobj = new perllcm.mono_loc_feat_t();
        outobj.desc = new double[(int) 128];
        System.arraycopy(this.desc, 0, outobj.desc, 0, 128); 
        outobj.X = new double[(int) 3];
        System.arraycopy(this.X, 0, outobj.X, 0, 3); 
        outobj.view_aiz = this.view_aiz;
 
        return outobj;
    }
 
}

