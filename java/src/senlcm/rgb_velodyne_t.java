/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package senlcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class rgb_velodyne_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public int datalen;
    public byte data[];
    public byte rgb[][];
 
    public rgb_velodyne_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xf728f88fc9cd0252L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(senlcm.rgb_velodyne_t.class))
            return 0L;
 
        classes.add(senlcm.rgb_velodyne_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeInt(this.datalen); 
 
        if (this.datalen > 0)
            outs.write(this.data, 0, datalen);
 
        for (int a = 0; a < this.datalen; a++) {
            outs.write(this.rgb[a], 0, 3);
        }
 
    }
 
    public rgb_velodyne_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public rgb_velodyne_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static senlcm.rgb_velodyne_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        senlcm.rgb_velodyne_t o = new senlcm.rgb_velodyne_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.datalen = ins.readInt();
 
        this.data = new byte[(int) datalen];
        ins.readFully(this.data, 0, datalen); 
        this.rgb = new byte[(int) datalen][(int) 3];
        for (int a = 0; a < this.datalen; a++) {
            ins.readFully(this.rgb[a], 0, 3);        }
 
    }
 
    public senlcm.rgb_velodyne_t copy()
    {
        senlcm.rgb_velodyne_t outobj = new senlcm.rgb_velodyne_t();
        outobj.utime = this.utime;
 
        outobj.datalen = this.datalen;
 
        outobj.data = new byte[(int) datalen];
        if (this.datalen > 0)
            System.arraycopy(this.data, 0, outobj.data, 0, this.datalen); 
        outobj.rgb = new byte[(int) datalen][(int) 3];
        for (int a = 0; a < this.datalen; a++) {
            System.arraycopy(this.rgb[a], 0, outobj.rgb[a], 0, 3);        }
 
        return outobj;
    }
 
}

