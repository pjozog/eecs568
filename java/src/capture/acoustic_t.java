/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package capture;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class acoustic_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public short src;
    public short dest;
    public byte type;
    public byte frame;
    public boolean ack_requested;
    public byte nframes;
    public short framesize[];
    public short maxframesize;
    public byte data[][];
    public boolean framevalid[];
 
    public acoustic_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x9eaebb605adbb210L;
 
    public static final byte PING = (byte) 1;
    public static final byte PONG = (byte) 2;
    public static final byte DATA = (byte) 3;
    public static final byte ACK = (byte) 4;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(capture.acoustic_t.class))
            return 0L;
 
        classes.add(capture.acoustic_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeShort(this.src); 
 
        outs.writeShort(this.dest); 
 
        outs.writeByte(this.type); 
 
        outs.writeByte(this.frame); 
 
        outs.writeByte( this.ack_requested ? 1 : 0); 
 
        outs.writeByte(this.nframes); 
 
        for (int a = 0; a < this.nframes; a++) {
            outs.writeShort(this.framesize[a]); 
        }
 
        outs.writeShort(this.maxframesize); 
 
        for (int a = 0; a < this.nframes; a++) {
            if (this.maxframesize > 0)
                outs.write(this.data[a], 0, maxframesize);
        }
 
        for (int a = 0; a < this.nframes; a++) {
            outs.writeByte( this.framevalid[a] ? 1 : 0); 
        }
 
    }
 
    public acoustic_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public acoustic_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static capture.acoustic_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        capture.acoustic_t o = new capture.acoustic_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.src = ins.readShort();
 
        this.dest = ins.readShort();
 
        this.type = ins.readByte();
 
        this.frame = ins.readByte();
 
        this.ack_requested = ins.readByte()!=0;
 
        this.nframes = ins.readByte();
 
        this.framesize = new short[(int) nframes];
        for (int a = 0; a < this.nframes; a++) {
            this.framesize[a] = ins.readShort();
        }
 
        this.maxframesize = ins.readShort();
 
        this.data = new byte[(int) nframes][(int) maxframesize];
        for (int a = 0; a < this.nframes; a++) {
            ins.readFully(this.data[a], 0, maxframesize);        }
 
        this.framevalid = new boolean[(int) nframes];
        for (int a = 0; a < this.nframes; a++) {
            this.framevalid[a] = ins.readByte()!=0;
        }
 
    }
 
    public capture.acoustic_t copy()
    {
        capture.acoustic_t outobj = new capture.acoustic_t();
        outobj.utime = this.utime;
 
        outobj.src = this.src;
 
        outobj.dest = this.dest;
 
        outobj.type = this.type;
 
        outobj.frame = this.frame;
 
        outobj.ack_requested = this.ack_requested;
 
        outobj.nframes = this.nframes;
 
        outobj.framesize = new short[(int) nframes];
        if (this.nframes > 0)
            System.arraycopy(this.framesize, 0, outobj.framesize, 0, this.nframes); 
        outobj.maxframesize = this.maxframesize;
 
        outobj.data = new byte[(int) nframes][(int) maxframesize];
        for (int a = 0; a < this.nframes; a++) {
            if (this.maxframesize > 0)
                System.arraycopy(this.data[a], 0, outobj.data[a], 0, this.maxframesize);        }
 
        outobj.framevalid = new boolean[(int) nframes];
        if (this.nframes > 0)
            System.arraycopy(this.framevalid, 0, outobj.framevalid, 0, this.nframes); 
        return outobj;
    }
 
}

