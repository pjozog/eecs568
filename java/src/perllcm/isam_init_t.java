/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package perllcm;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class isam_init_t implements lcm.lcm.LCMEncodable
{
    public byte verbose;
    public byte force_numerical_jacobian;
    public int method;
    public double epsilon1;
    public double epsilon2;
    public double epsilon3;
    public double epsilon_abs;
    public double epsilon_rel;
    public int max_iterations;
    public double lm_lambda0;
    public double lm_lambda_factor;
    public byte continuable;
    public double last_lambda;
    public int mod_update;
    public int mod_batch;
    public int mod_solve;
 
    public isam_init_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x9531839b9aa3150fL;
 
    public static final int GAUSS_NEWTON = 1;
    public static final int LEVENBERG_MARQUARDT = 2;
    public static final int DOG_LEG = 3;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(perllcm.isam_init_t.class))
            return 0L;
 
        classes.add(perllcm.isam_init_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte(this.verbose); 
 
        outs.writeByte(this.force_numerical_jacobian); 
 
        outs.writeInt(this.method); 
 
        outs.writeDouble(this.epsilon1); 
 
        outs.writeDouble(this.epsilon2); 
 
        outs.writeDouble(this.epsilon3); 
 
        outs.writeDouble(this.epsilon_abs); 
 
        outs.writeDouble(this.epsilon_rel); 
 
        outs.writeInt(this.max_iterations); 
 
        outs.writeDouble(this.lm_lambda0); 
 
        outs.writeDouble(this.lm_lambda_factor); 
 
        outs.writeByte(this.continuable); 
 
        outs.writeDouble(this.last_lambda); 
 
        outs.writeInt(this.mod_update); 
 
        outs.writeInt(this.mod_batch); 
 
        outs.writeInt(this.mod_solve); 
 
    }
 
    public isam_init_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public isam_init_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static perllcm.isam_init_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        perllcm.isam_init_t o = new perllcm.isam_init_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.verbose = ins.readByte();
 
        this.force_numerical_jacobian = ins.readByte();
 
        this.method = ins.readInt();
 
        this.epsilon1 = ins.readDouble();
 
        this.epsilon2 = ins.readDouble();
 
        this.epsilon3 = ins.readDouble();
 
        this.epsilon_abs = ins.readDouble();
 
        this.epsilon_rel = ins.readDouble();
 
        this.max_iterations = ins.readInt();
 
        this.lm_lambda0 = ins.readDouble();
 
        this.lm_lambda_factor = ins.readDouble();
 
        this.continuable = ins.readByte();
 
        this.last_lambda = ins.readDouble();
 
        this.mod_update = ins.readInt();
 
        this.mod_batch = ins.readInt();
 
        this.mod_solve = ins.readInt();
 
    }
 
    public perllcm.isam_init_t copy()
    {
        perllcm.isam_init_t outobj = new perllcm.isam_init_t();
        outobj.verbose = this.verbose;
 
        outobj.force_numerical_jacobian = this.force_numerical_jacobian;
 
        outobj.method = this.method;
 
        outobj.epsilon1 = this.epsilon1;
 
        outobj.epsilon2 = this.epsilon2;
 
        outobj.epsilon3 = this.epsilon3;
 
        outobj.epsilon_abs = this.epsilon_abs;
 
        outobj.epsilon_rel = this.epsilon_rel;
 
        outobj.max_iterations = this.max_iterations;
 
        outobj.lm_lambda0 = this.lm_lambda0;
 
        outobj.lm_lambda_factor = this.lm_lambda_factor;
 
        outobj.continuable = this.continuable;
 
        outobj.last_lambda = this.last_lambda;
 
        outobj.mod_update = this.mod_update;
 
        outobj.mod_batch = this.mod_batch;
 
        outobj.mod_solve = this.mod_solve;
 
        return outobj;
    }
 
}

